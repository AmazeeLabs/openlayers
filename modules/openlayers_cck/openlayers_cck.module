<?php
// $Id$

/**
 * @file
 * This file holds the main Drupal hook functions 
 * and private functions for the openlayers_cck module.
 *
 * @ingroup openlayers
 */

/**
 * Map ID Prefix
 */
define('OPENLAYERS_CCK_MAP_ID_PREFIX', 'openlayers-cck-map-auto-id');

/**
 * Implementation of hook_help
 */
function openlayers_cck_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers_cck':
      $output = '<p>'. t('The openlayers_cck module provides fields and widgets that interface with OpenLayers.') .'</p>';
  }
  
  return $output;
}

/**
 * Implementation of hook_theme().
 */
function openlayers_cck_theme() {
  return array(
    'openlayers_cck_geo_field' => array(
      'arguments' => array(
        'element' => NULL
      ),
    ),
    'openlayers_cck_map' => array(
      'arguments' => array(
        'field' => NULL,
        'mapid' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_info
 */
function openlayers_cck_widget_info() {
  $info = array();
  
  // Check for geo_field module
  if (module_exists('geo_field')) {
    $info['openlayers_cck_geo_field'] = array(
      'label' => t('OpenLayers Map Widget'),
      'field types' => array('geo'),
    );
  }
  
  return $info;
}

/**
 * Implementation of hook_widget_settings().
 */
function openlayers_cck_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      // Get defaults, check if there are already defaults
      // @@TODO: What if the global defaults have not been created in the interface
      if (isset($widget['openlayers_cck'])) {
        $defaults = $widget['openlayers_cck'];
      }
      else {
        $defaults = variable_get('openlayers_defaults_form', array());
      }
      
      // Get map form
      $map_form = openlayers_map_form($defaults);
      
      // @@TODO (BUG): $map_form is created successfully with defaults, 
      // but it does not translate to outputted form??
      
      // Put form into a collapsed fieldset, as this promotes good usability
      // Most users will not want to edit these fields
      $form['openlayers_cck'] = $map_form;
      $form['openlayers_cck']['#type'] = 'fieldset';
      $form['openlayers_cck']['#title'] = 'Map Settings';
      $form['openlayers_cck']['#description'] = 'These are the settings that determine how the map will look.';
      $form['openlayers_cck']['#collapsible'] = 'TRUE';
      $form['openlayers_cck']['#collapsed'] = 'TRUE';
      // Return form
      return $form;

    case 'validate':
      break;

    case 'save':
      // @@TODO: Figure out a way to save this form in an easy way.
      // Ideally we just want to save the map array.
      // We could create a DB table to save this information.
      return array('openlayers_cck');
  }
}

/**
 * Implementation of hook_widget().
 */
function openlayers_cck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // @@TODO: Put this outside the widget, but inside the field, so it is not rendered
  // for each item in the field.  Not sure how this is done.
  
  $fieldname = $field['field_name'];
  // Only include map once per field
  static $included_field = '';
  if ($included_field != $fieldname) {
    // Create map
    $mapid = OPENLAYERS_CCK_MAP_ID_PREFIX .'-'. $fieldname;
    $map['id'] = $mapid;
    
    // Use widget settings form to create base map array
    $widget_map = $field['widget']['openlayers_cck'];
    $map = openlayers_merge_maps($widget_map, $map);
    
    // Add an event to the map. When a layer is added fire the JavaScript function openlayersCCKLoadValues.
    // openlayersCCKLoadValues takes care of loading data from the CCK fields into the map.
    $map['events'] = array(
      'addlayer' => array('openlayersCCKLoadValues'),
    );
    
    // Define a vector layer for our features
    $map['layers'] = array(
      'openlayers_cck_vector' => array(
        'id' => 'openlayers_cck_vector',
        'type' => 'Vector',
        'name' => $field['widget']['label'],
        'options' => array(),
        'events' => array(
          'featureselected' => array('openlayersCCKFeaturesSelected'),
          'featureunselected' => array('openlayersCCKFeaturesUnselected'),
        ),
      ),
    );
    
    // Look at field type, and add respective control
    switch ($field['geo_type']) {
      case 'point':
        $map['draw_features'] = array(
          'point' => array(
            'type' => 'Point',
            'vector' => 'openlayers_cck_vector',
            'featureadded_handler' => array('openlayersCCKFeatureAdded'),
            'featuremodified_handler' => array('openlayersCCKFeatureModified'),
            'featureremoved_handler' => array('openlayersCCKFeatureRemoved'),
          ),
        );
        break;
        
      case 'linestring':
        $map['draw_features'] = array(
          'path' => array(
            'type' => 'Path',
            'vector' => 'openlayers_cck_vector',
            'featureadded_handler' => array('openlayersCCKFeatureAdded'),
            'featuremodified_handler' => array('openlayersCCKFeatureModified'),
            'featureremoved_handler' => array('openlayersCCKFeatureRemoved'),
          ),
        );
        break;
        
      case 'polygon':
        $map['draw_features'] = array(
          'polygon' => array(
            'type' => 'Polygon',
            'vector' => 'openlayers_cck_vector',
            'featureadded_handler' => array('openlayersCCKFeatureAdded'),
            'featuremodified_handler' => array('openlayersCCKFeatureModified'),
            'featureremoved_handler' => array('openlayersCCKFeatureRemoved'),
          ),
        );
        break;
    
    }
    
    // Add JS
    drupal_add_js(drupal_get_path('module', 'openlayers_cck') .'/js/openlayers_cck.js');
    //Add CSS
    drupal_add_css(drupal_get_path('module', 'openlayers_cck') .'/openlayers_cck.css', 'module');
    // Render Map
    $rendered_map = openlayers_render_map($map);
    // Put together array for JS
    $openlayers_cck = array(
      'openlayers_cck' => array(
        'maps' => array(
          $mapid => array(
            'field_name' => $fieldname,
            'field_data' => $field,
            'field_name_js' => str_replace('_', '-', $fieldname), // Best way?
            'field_map_themed' => theme('openlayers_cck_map', $field, $rendered_map),
            'field_container' => str_replace('_', '-', $fieldname) .'-items',  // Best way??
            'field_items' => $items,
          ),
        ),
      ),
    );

    // Add JS settings
    drupal_add_js($openlayers_cck, 'setting');
    // Change static variable
    $included_field = $fieldname;
  }

  // Return widget array
  return array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
}

/**
 * Implementation of FAPI hook_elements().
 */
function openlayers_cck_elements() {
  return array(
    'openlayers_cck_geo_field' => array(
      '#input' => TRUE,
      '#columns' => array('lat', 'lon', 'wkt'),
      '#delta' => 0,
      '#process' => array('openlayers_cck_geo_field_process'),
    ),
  );
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function openlayers_cck_geo_field_process($element, $edit, $form_state, $form) {
  // Define some variables
  $field = $form['#field_info'][$element['#field_name']];
  $delta = $element['#delta'];
  $field_data = content_fields($element['#field_name'], $element['#type_name']);
    
  // Define elements
  $element['wkt'] = array(
    '#type' => 'textarea',
    '#title' => t($field['widget']['label']),
    '#rows' => 2,
    '#default_value' => isset($element['#value']['wkt']) ? $element['#value']['wkt'] : NULL,
    '#required' => $field['required'],
    '#description' => $field['widget']['description'],
    '#attributes' => array('rel' => OPENLAYERS_CCK_MAP_ID_PREFIX .'-'. $field['field_name']),
  );
  
  // Remove title and description for multiple
  if ($field_data['multiple'] > 0) {
    unset($element['wkt']['#title']);
    unset($element['wkt']['#description']);
  }
  
  return $element;
}

/**
 * Theme function for openlayers_cck_geo_field element
 */
function theme_openlayers_cck_geo_field($element) {
  return $element['#children'];
}

/**
 * Theme function for openlayers_cck_map
 */
function theme_openlayers_cck_map($field = array(), $map = array()) {
  $output = '
    <div class="form-item openlayers-cck-widget-container">
      <label for="'. $map['id'] .'">'. $field['widget']['label'] .'</label>
      '. $map['themed'] .'
      <div class="description openlayers-cck-field-description">
        '. $field['widget']['description'] .'
      </div>
      <div class="description openlayers-cck-map-instructions">'.t('Click the tools in the upper right-hand corner of the map to switch between draw mode and zoom/pan mode. Draw your shape, double-clicking to finish. You may edit your shape using the control points. To delete a shape, select it and press the delete key. To delete a vertex hover over it and press the d key.').'</div>
      <div class="openlayers-cck-actions">
        <a href="#" id="'. $map['id'] .'-wkt-switcher" rel="'. $map['id'] .'">'. t('Show/Hide WKT Fields') .'</a>
      </div>
    </div>
  ';
  return $output;
}