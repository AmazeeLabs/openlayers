<?php
// $Id$

/**
 * @file
 * This file holds the main Drupal hook functions 
 * and private functions for the openlayers_cck module.
 *
 * @ingroup openlayers
 */

/**
 * Map ID Prefix
 */
define('OPENLAYERS_CCK_MAP_ID_PREFIX', 'openlayers-cck-map-auto-id');

/**
 * Implementation of hook_help
 */
function openlayers_cck_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers_cck':
      $output = '<p>'. t('The openlayers_cck module provides fields and widgets that interface with OpenLayers.') .'</p>';
  }
  
  return $output;
}

/**
 * Implementation of hook_theme().
 */
function openlayers_cck_theme() {
  return array(
    'openlayers_cck_geo_field' => array(
      'arguments' => array(
        'element' => NULL
      ),
    ),
    'openlayers_cck_map' => array(
      'arguments' => array(
        'field' => NULL,
        'map' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_gis_input_info().
 */
function openlayers_cck_gis_input_info($gis_type = NULL) {
  // Note, we shou use the following so that we can actually control how
  // the widget will work, butdifficult to make unlimited work
  // and Geo does not support it yet
  // 'multiple values' => CONTENT_HANDLE_MODULE,
  $inputs = array(
    'openlayers_cck_geo_field' => array(
      'label' => t('OpenLayers Map'),
      'gis input' => 'wkt',
      'safe reverse' => TRUE,
      'gis types' => array('point', 'linestring', 'polygon'),
      'element' => array(
        '#type' => 'openlayers_cck_geo_field',
      ),
    ),
  );
  return $inputs;
}

/**
 * Implementation of FAPI hook_elements().
 */
function openlayers_cck_elements() {
  return array(
    'openlayers_cck_geo_field' => array(
      '#input' => TRUE,
      '#columns' => array('geo_wkt'),
      '#delta' => 0,
      '#process' => array('openlayers_cck_geo_field_process'),
    ),
  );
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 */
function openlayers_cck_geo_field_process($element, $edit, &$form_state, &$form) {
  $field = $form['#field_info'][$element['#parents'][0]];
  $delta = $element['#delta'];
  $field_name = $field['field_name'];
  $widget = $field['widget'];
  $field_label = $widget['label'];
  static $map_included = FALSE;

  // Only include one map
  if ($map_included == FALSE) {
    // Make map for input
    $rendered_map = _openlayers_cck_render_element_map($field_name, $field_label, $element['#value'], $field);
    // Create map element
    $element['map'] = array(
      '#value' => theme('openlayers_cck_map', $field, $rendered_map),
    );
    // Mark as included
    $map_included = TRUE;
  }
  
  // Create storage element
  $element['geo_wkt'] = array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#required' => $delta == 0 && $field['required'],
    '#delta' => $delta,
    '#field_name' => $field_name,
    '#type_name' => $field['type_name'],
    '#attributes' => array('rel' => $rendered_map['id']),
  );

  return $element;
}

/**
 * Theme function for openlayers_cck_geo_field element
 */
function theme_openlayers_cck_geo_field($element) {
  return $element['#children'];
}

/**
 * Theme function for openlayers_cck_map
 */
function theme_openlayers_cck_map($field = array(), $map = array()) {
  $title = check_plain(t($field['widget']['label']));
  $description = content_filter_xss(t($field['widget']['description']));
  
  $output = '
    <div id="openlayers-cck-map-container-' . $map['id'] . '" class="form-item openlayers-cck-map-container">
      <label for="openlayers-cck-map-' . $map['id'] . '">' . $title . ':</label>
      ' . $map['themed'] . '
      <div class="description openlayers-cck-map-instructions">'.t('Click the tools in the upper right-hand corner of the map to switch between draw mode and zoom/pan mode. Draw your shape, double-clicking to finish. You may edit your shape using the control points. To delete a shape, select it and press the delete key. To delete a vertex hover over it and press the d key.').'</div>
      <div class="description openlayers-cck-map-description">
        ' . $description . '
      </div>
      <div class="openlayers-cck-actions">
        <a href="#" id="' . $map['id'] . '-wkt-switcher" rel="' . $map['id'] . '">'. t('Show/Hide WKT Fields') .'</a>
      </div>
    </div>
  ';
  return $output;
}

/**
 * Render Map for Geo Widget
 *
 * @param $field_name
 *   CCK name of field
 * @param $values
 *   Current default values
 * @param $field
 *   Array of field data
 * @return
 *   Rendered map array
 */
function _openlayers_cck_render_element_map($field_name = '', $field_label = '', $values = array(), $field = array()) {
  $field_name_html = str_replace('_', '-', $field_name);
  $map_id = OPENLAYERS_CCK_MAP_ID_PREFIX .'-'. $field_name;
  $field_container = '';

  // Get default map
  // @TODO: Use widget settings when geo supports it
  $map = openlayers_get_default_map();
  
  // Put together map
  $map['id'] = $map_id;

  // Add main event for CCK processing
  $map['events']['beforeBehaviors'] = array('CCKProcess');
  
  // Define beahvoirs
  $map['behaviors']['openlayers_cck_zoom_to_layer'] = array(
    'id' => 'openlayers_cck_zoom_to_layer',
    'type' => 'openlayers_behaviors_zoom_to_layer',
    'layer' => 'openlayers_cck_vector',
  );
  
  // Make sure that our display projection matches the database projection
  $map['options'] = array(
    'displayProjection' => ($field['srid'] != 0) ? $field['srid'] : '4326',
  );
  
  // Define a vector layer for our features
  $map['layers']['openlayers_cck_vector'] = array(
    'id' => 'openlayers_cck_vector',
    'type' => 'Vector',
    'name' => $field_label,
    'options' => array(),
    'events' => array(
      'featureselected' => array('CCKFeaturesSelected'),
      'featureunselected' => array('CCKFeaturesUnselected'),
    ),
  );
  
  // Build default control without feature type
  $map['behaviors']['openlayers_cck_edit_'. $field['geo_type']] = array(
    'id' => 'openlayers_cck_edit_'. $field['geo_type'],
    'type' => 'openlayers_behaviors_draw_features',
    'layer' => 'openlayers_cck_vector',
    'featureadded_handler' => array('OL.CCK.featureAdded'),
    'featuremodified_handler' => array('OL.CCK.featureModified'),
    'featureremoved_handler' => array('OL.CCK.featureRemoved'),
  );
  
  // Determine type from geo type
  switch ($field['geo_type']) {
    case 'point':
      $map['behaviors']['openlayers_cck_edit_'. $field['geo_type']]['feature_type'] = 'point';
      break;
    
    case 'linestring':
      $map['behaviors']['openlayers_cck_edit_'. $field['geo_type']]['feature_type'] = 'path';
      break;
      
    case 'polygon':
      $map['behaviors']['openlayers_cck_edit_'. $field['geo_type']]['feature_type'] = 'polygon';
      break;
  }
  
  // Check if multiple, as there are specific needs
  if (empty($field['multiple'])) {
    // If a single value
    $field_container = 'edit-' . $field_name_html . '-0-geo-geo-wkt-wrapper';
  }
  else {
    // For multiples, we need to move out map widget outside of the fields
    $field_container = $field_name . '_values';
    // Call Move Map event
    $map['events']['beforeEverything'] = array('CCKMoveMap');
  }
  
  // Render Map
  $rendered_map = openlayers_render_map($map);
  
  // Check errors
  if (!$rendered_map['errors']) {
    // Add JS
    drupal_add_js(drupal_get_path('module', 'openlayers_cck') .'/js/openlayers_cck.js');
    //Add CSS
    drupal_add_css(drupal_get_path('module', 'openlayers_cck') .'/openlayers_cck.css', 'module');
    
    // Put together array for JS
    $openlayers_cck = array(
      'openlayers_cck' => array(
        'maps' => array(
          $map_id => array(
            'field_name' => $field_name,
            'field_data' => $field,
            'field_name_js' => $field_name_html,
            'field_container' => $field_container,
            'field_items' => $items,
            'map_container' => 'openlayers-cck-map-container-' . $map_id,
          ),
        ),
      ),
    );

    // Add JS settings
    drupal_add_js($openlayers_cck, 'setting');
  }

  return $rendered_map;
}