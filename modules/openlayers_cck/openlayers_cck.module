<?php
// $Id$

/**
 * @file
 * This file holds the main Drupal hook functions
 * and private functions for the openlayers_cck module.
 *
 * @ingroup openlayers
 */

/**
 * Map ID Prefix
 */
define('OPENLAYERS_CCK_WIDGET_MAP_ID_PREFIX', 'openlayers-cck-widget-map');
define('OPENLAYERS_CCK_FORMATTER_MAP_ID_PREFIX', 'openlayers-cck-formatter-map');

// TODO: only load on hooks
module_load_include('inc', 'openlayers_cck', 'openlayers_cck.test.inc');

/**
 * Implementation of hook_help().
 */
function openlayers_cck_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers_cck':
      return '<p>'. t('The openlayers_cck module provides 
        fields and widgets that interface with OpenLayers.') .'</p>';
      
  }
}

/**
 * Implementation of hook_theme().
 */
function openlayers_cck_theme($existing, $type, $theme, $path) {
  $themes = array(
    'openlayers_wkt_widget' => array(
      'arguments' => array(
        'element' => NULL
      ),
      'file' => 'openlayers_cck_theme.inc',
    ),
    'openlayers_cck_map' => array(
      'arguments' => array(
        'field' => NULL,
        'map' => NULL,
      ),
      'file' => 'openlayers_cck_theme.inc',
    ),
    'openlayers_cck_formatter_default' => array(
      'arguments' => array('element' => NULL),
      'gis input' => 'wkt',
      'file' => 'openlayers_cck_theme.inc',
    ),
  );

  // Create formatter theme functions
  foreach (openlayers_preset_options() as $name => $title) {
    $themes['openlayers_cck_formatter_openlayers_map_' . $name] = array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_openlayers_cck_formatter_map',
      'gis input' => 'wkt',
    );
  }

  return $themes;
}

/**
 * Implementation of hook_field_info().
 */
function openlayers_cck_field_info() {
  return array(
    'openlayers_wkt' => array(
      'label' => t('OpenLayers WKT'),
      'description' => t('Input WKT data via an OpenLayers map.'),
      'callbacks' => array(
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function openlayers_cck_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      
      $features = array(
        'point' => t('Point'),
        'path' => t('Path'),
        'polygon' => t('Polygon'),
      );
      
      // What type of features to accept
      $form['openlayers_cck_feature_types'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Feature Types'),
        '#description' => t('Choose the features that are allowed to be inputed on the map.'),
        '#options' => $features,
        '#required' => TRUE,
        '#default_value' => is_array($field['openlayers_cck_feature_types']) ?
          $field['openlayers_cck_feature_types'] : array('point', 'path', 'polygon'),
      );
      
      return $form;

    case 'validate':
      break;

    case 'save':
      return array('openlayers_cck_feature_types');

    case 'database columns':
      $columns = array(
        'openlayers_wkt' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
          'sortable' => TRUE,
          'views' => TRUE,
        ),
      );
      return $columns;

    case 'views data':
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      return $data;

  }
}

/**
 * Implementation of hook_field().
 */
function openlayers_cck_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      // Check if field is valid WKT format
      foreach ($items as $delta => $value) {
        // @@TODO: validate WKT
      }
      break;

  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function openlayers_cck_content_is_empty($item, $field) {
  return empty($item['openlayers_wkt']);
}

/**
 * Implementation of hook_widget_info().
 */
function openlayers_cck_widget_info() {
  return array(
    'openlayers_wkt_widget' => array(
      'label' => t('OpenLayers Map'),
      'field types' => array('openlayers_wkt'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function openlayers_cck_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      // Get Presets
      $presets = openlayers_preset_options();
      $default_preset = variable_get('openlayers_default_preset', 'default');

      // Define form elements
      $form['openlayers_cck_preset_map'] = array(
        '#type' => 'select',
        '#title' => t('Input Map Preset'),
        '#description' => t('Choose the OpenLayers Preset Map that will be used to input the data.'),
        '#options' => $presets,
        '#default_value' => isset($widget['openlayers_cck_preset_map']) ? $widget['openlayers_cck_preset_map'] : $default_preset,
      );

      // Return form
      return $form;

    case 'save':
      return array('openlayers_cck_preset_map');
  }
}

/**
 * Implementation of hook_widget().
 */
function openlayers_cck_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array();
  switch ($field['widget']['type']) {
    case 'openlayers_wkt_widget':
      $element['#type'] = 'openlayers_wkt_widget';
      $element['#default_value'] = $items;
      break;
  }
  return $element;
}

/**
 * Implementation of FAPI hook_elements().
 */
function openlayers_cck_elements() {
  return array(
    'openlayers_wkt_widget' => array(
      '#input' => TRUE,
      '#columns' => array('openlayers_wkt'),
      '#delta' => 0,
      '#process' => array('openlayers_cck_wkt_element_process'),
    ),
  );
}

/**
 * Process an individual element.
 */
function openlayers_cck_wkt_element_process($element, $edit, &$form_state, &$form) {
  $field = $form['#field_info'][$element['#parents'][0]];
  $delta = $element['#delta'];
  $field_name = $field['field_name'];
  $field_key = $element['#columns'][0];

  // Make map for input
  $rendered_map = _openlayers_cck_render_element_map(
    $field_name, $field['widget']['label'], $element['#value'], $field);
  // Create map element
  $element['map'] = array(
    '#value' => theme('openlayers_cck_map', $field, $rendered_map),
  );

  // Create storage element
  $element['openlayers_wkt'] = array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#attributes' => array('rel' => $rendered_map['id']),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  // Make default value.  It will be stored in hidden field
  $default_value = '';
  if (is_array($element['#value'])  && count($element['#value']) > 0) {
    // Look for actual values
    $values = array();
    foreach ($element['#value'] as $id => $data) {
      if (is_array($data)) {
        // Openlayers WKT
        $values[$id] = $data['openlayers_wkt'];
      }
      elseif (is_string($data)) {
        // Geo WKT
        $values[$id] = $data;
      }
    }
    // Create string
    if (is_array($values)  && count($values) > 0) {
      $default_value = implode('||', $values);
    }
  }
  
  // Hidden element.  This is used to store a more distinctly
  // delimited dataset
  $element['openlayers_wkt_hidden'] = array(
    '#type' => 'hidden',
    '#default_value' => $default_value,
  );

  // Set #element_validate in a way that it will not wipe out other
  // validation functions already set by other modules.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }
  array_unshift($element['#element_validate'], 'openlayers_cck_validate');

  // Make sure field info will be available to the validator which
  // does not get the values in $form.
  $form_state['#field_info'][$field['field_name']] = $field;
  return $element;
}

/**
 * FAPI validate function for custom element
 */
function openlayers_cck_validate($element, &$form_state) {
  // Transpose selections from field => delta to delta => field,
  // turning multiple selected options into multiple parent elements.
  // Immediate parent is the delta, need to get back to parent's parent
  // to create multiple elements.
  
  // Get field array
  $field = $form_state['#field_info'][$element['#field_name']];
  // Convert data to array of values
  $items = _openlayers_cck_convert_form_data($element, $field);
  // Set value in form
  form_set_value($element, $items, $form_state);

  // Check we don't exceed the allowed number of values.
  if ($field['multiple'] > 1 && count($items) > $field['multiple']) {
    $field_key  = $element['#columns'][0];
    form_error($element[$field_key], 
      t('%name: this field cannot hold more that @count values.', 
        array(
          '%name' => t($field['widget']['label']), 
          '@count' => $field['multiple']
        )
      )
    );
  }
}

/**
 *
 */
function _openlayers_cck_convert_form_data($element, $field) {
  $field_key = $element['#columns'][0];
  //$items = explode('||', $element['#value'][$field_key . '_hidden']);
  $items = explode('||', $element['#value']['openlayers_wkt_hidden']);
  $result = array();

  if (empty($items)) {
    $items[] = NULL;
  }
  $result = content_transpose_array_rows_cols(array($field_key => $items));
  return $result;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function openlayers_cck_field_formatter_info() {
  $formatters = array();

  // Default formatter
  $formatters['default'] = array(
    'label' => t('WKT Value'),
    'field types' => array('openlayers_wkt'),
    'multiple values' => CONTENT_HANDLE_MODULE,
    'gis types' => array('point', 'linestring', 'polygon'),
    'gis input' => 'wkt',
  );

  // Map preset formatter
  foreach (openlayers_preset_options() as $name => $title) {
    $formatters['openlayers_map_' . $name] = array(
      'label' => t('OpenLayers Map: @preset', array('@preset' => check_plain($title))),
      'field types' => array('openlayers_wkt'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'gis types' => array('point', 'linestring', 'polygon'),
      'gis input' => 'wkt',
    );
  }
  return $formatters;
}


/**
 * Implementation of hook_gis_input_info().
 */
function openlayers_cck_gis_input_info($gis_type = NULL) {
  $inputs = array(
    'openlayers_wkt_widget' => array(
      'label' => t('OpenLayers Map'),
      'gis input' => 'wkt',
      'safe reverse' => TRUE,
      'gis types' => array('point', 'linestring', 'polygon'),
      'element' => array(
        '#type' => 'openlayers_wkt',
      ),
    ),
  );
  return $inputs;
}


/**
 * Render Map for Widget
 *
 * @param $field_name
 *   CCK name of field
 * @param $values
 *   Current default values
 * @param $field
 *   Array of field data
 * @return
 *   Rendered map array
 */
function _openlayers_cck_render_element_map($field_name = '', $field_label = '', $values = array(), $field = array()) {
  $field_name_html = str_replace('_', '-', $field_name);
  $map_id = OPENLAYERS_CCK_WIDGET_MAP_ID_PREFIX . '-' . $field_name;
  $widget = $field['widget'];
  $field_container = 'edit-' . $field_name_html . '-openlayers-wkt-wrapper';
  $field_id = 'edit-' . $field_name_html . '-openlayers-wkt';
  $hidden_field_id = 'edit-' . $field_name_html . '-openlayers-wkt-hidden';
  
  // Get map to use for field
  if (isset($field['widget']['openlayers_cck_preset_map'])) {
    $preset = openlayers_preset_load($field['widget']['openlayers_cck_preset_map']);
    $map = openlayers_build_map($preset->data);
  }
  else {
    $map = openlayers_build_map();
  }

  // Put together map
  $map['id'] = $map_id;

  // Make sure that our display projection matches the database projection
  $map['options']['displayProjection'] = ($field['srid'] != 0) ? $field['srid'] : '4326';

  // Define a vector layer for our features
  $map['layers']['openlayers_cck_vector'] = array(
    'id' => 'openlayers_cck_vector',
    'type' => 'Vector',
    'name' => $field_label,
    'options' => array(),
    'events' => array(
      'featureselected' => array('CCKFeaturesSelected'),
      'featureunselected' => array('CCKFeaturesUnselected'),
    ),
  );

  // Check which feature types are available
  if ($field['openlayers_cck_feature_types']) {
    
  }
  else {
    // @@TODO: Allow default values using a map
    // We are in the widget settings screen and it wants default values
    return FALSE;
  }
  
  // Render Map
  $rendered_map = openlayers_render_map($map);
  
  // Check errors
  if (!$rendered_map['errors']) {
    //Add CSS
    drupal_add_css(drupal_get_path('module', 'openlayers_cck') .'/openlayers_cck.css', 'module');

    // Put together array for JS
    $openlayers_cck = array(
      'openlayers_cck' => array(
        'maps' => array(
          $map_id => array(
            'field_name' => $field_name,
            'field_data' => $field,
            'field_name_js' => $field_name_html,
            'field_container' => $field_container,
            'field_items' => $items,
            'field_id' => $field_id,
            'hidden_field_id' => $hidden_field_id,
            'map_container' => 'openlayers-cck-map-container-' . $map_id,
          ),
        ),
      ),
    );

    // Add JS settings
    drupal_add_js($openlayers_cck, 'setting');
  }

  return $rendered_map;
}

/**
 * Implementation of hook_openlayers_presets.
 */
function openlayers_cck_openlayers_presets() {
  // Create full preset array
  $default = new stdClass();
  $default->api_version = 1;
  $default->name = 'cck_widget';
  $default->title = t('CCK Map');
  $default->description = t('Map preset for small form input widgets');
  $default->data = array(
    'projection' => '4326',
    'width' => 'auto',
    'default_layer' => 'openlayers_default_wms',
    'height' => '300px',
    'center' => array(
      'initial' => array(
        'centerpoint' => '0,0',
        'zoom' => '1'
      )
    ),
    'options' => array(
      'displayProjection' => '4326',
      'maxExtent' => openlayers_get_extent('4326'),
    ),
    'behaviors' => array(
      'openlayers_behavior_panzoombar' => array(),
    ),
    'layer_styles' => array(
      'openlayers_default_wms' => 'default'
    ),
  );
  return array('default' => $default);
}
