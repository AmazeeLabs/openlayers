<?php
// $Id$

/**
 * @file
 * This file holds the main Drupal hook functions
 * and private functions for the openlayers_layers module.
 *
 * @ingroup openlayers
 */

/**
 * Implementation of hook_help().
 */
function openlayers_layers_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#openlayers_layers':
      $output = '<p>'. t('Provides a wide variety of freely available layers.') .'</p>';
      return $output;

  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function openlayers_layers_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_layers':
        return array('version' => 1);
    }
  }
}

function openlayers_layers_openlayers_layer_types() {
  return array(
    'openlayers_layers_google' => array(
      'title' => t('Google'),
      'description' => t('Google Maps API Map'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers_layers') .'/includes/layer_types',
        'file' => 'google.inc',
        'class' => 'openlayers_layer_type_google',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layers_yahoo' => array(
      'title' => t('Yahoo'),
      'description' => t('Yahoo Maps API Map'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers_layers') .'/includes/layer_types',
        'file' => 'yahoo.inc',
        'class' => 'openlayers_layer_type_yahoo',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layers_virtualearth' => array(
      'title' => t('Virtual Earth'),
      'description' => t('Microsoft Virtual Earth'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers_layers') .'/includes/layer_types',
        'file' => 'virtualearth.inc',
        'class' => 'openlayers_layer_type_virtualearth',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layers_type_cloudmade' => array(
      'title' => t('CloudMade'),
      'description' => t('CloudMade'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers_layers') .'/includes/layer_types',
        'file' => 'cloudmade.inc',
        'class' => 'openlayers_layers_type_cloudmade',
        'parent' => 'openlayers_layer_type',
      ),
    ),
  );
}

/**
 * Implementation of hook_openlayers_layers_info.
 */
function openlayers_layers_openlayers_layers_info() {
  $layers = array();

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'google_satellite';
  $layer->title = t('Google Maps Satellite');
  $layer->description = t('Google Maps Satellite Imagery. Legally encumbered.');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'satellite',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_google',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'google_hybrid';
  $layer->title = t('Google Maps Hybrid');
  $layer->description = t('Google Maps with roads and terrain.');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'hybrid',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_google',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'google_normal';
  $layer->title = t('Google Maps Normal');
  $layer->description = t('Standard Google Maps Roads');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'normal',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_google',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'google_physical';
  $layer->title = t('Google Maps Physical');
  $layer->description = t('Google Maps Hillshades');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'physical',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_google',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'yahoo_satellite';
  $layer->title = t('Yahoo Maps Satellite');
  $layer->description = t('');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'satellite',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_yahoo',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'yahoo_street';
  $layer->title = t('Yahoo Maps Street');
  $layer->description = t('');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'street',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_yahoo',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'yahoo_hybrid';
  $layer->title = t('Yahoo Maps Hybrid');
  $layer->description = t('');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'hybrid',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_yahoo',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;
  
  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'virtualearth_street';
  $layer->title = t('Virtual Earth Street');
  $layer->description = t('');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'street',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_virtualearth',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'virtualearth_satellite';
  $layer->title = t('Virtual Earth Satellite');
  $layer->description = t('');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'satellite',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_virtualearth',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'virtualearth_hybrid';
  $layer->title = t('Virtual Earth Hybrid');
  $layer->description = t('');
  $layer->data = array(
    'baselayer' => TRUE,
    'type' => 'hybrid',
    'projection' => array('900913'),
    'layer_type' => 'openlayers_layers_virtualearth',
    'events' => array(),
  );
  $layers[$layer->name] = $layer;

  return $layers;
}


/**
 * Implementation of hook_openlayers_layers_info().
function openlayers_layers_openlayers_layers_info() {
  
  $file = drupal_get_path('module', 'openlayers_layers') .'/includes/openlayers_layers.layers.inc';
  $callback = 'openlayers_layers_process_layers';
  
  $info = array();

  // Define info array
  /*
  $info['openlayers_layers_nasa_daily_planet'] = new StdClass();
  $info['openlayers_layers_nasa_daily_planet']->api_version = 1;
  $info['openlayers_layers_nasa_daily_planet']->name = 'openlayers_layers_nasa_daily_planet';
  $info['openlayers_layers_nasa_daily_planet']->title = t('NASA Daily Planet');
  $info['openlayers_layers_nasa_daily_planet']->description = t('This layer is the most current, near-global image of the earth available. It is a countinuously updating image from the MODIS TERRA satellite');
  $info['openlayers_layers_nasa_daily_planet']->data = array (
    'projection' => array('4326'),
    'baselayer' => TRUE,
    'type' => 'WMS',
    'url' => 'http://wms.jpl.nasa.gov/wms.cgi?',
    'params' => array('layers' => 'daily_planet', 'format' => 'image/png'),
  );

  $info['openlayers_layers_nasa_blue_marble'] = new StdClass();
  $info['openlayers_layers_nasa_blue_marble']->api_version = 1;
  $info['openlayers_layers_nasa_blue_marble']->name = 'openlayers_layers_nasa_blue_marble';
  $info['openlayers_layers_nasa_blue_marble']->title = t('NASA Blue Marbel');
  $info['openlayers_layers_nasa_blue_marble']->description = t('Blue Marble Next Generation, A MODIS-derived 500m true color earth dataset showing seasonal dynamics. This version of the BMNG was updated June 2007');
  $info['openlayers_layers_nasa_blue_marble']->data = array (
    'projection' => array('4326'),
    'baselayer' => TRUE,
    'type' => 'WMS',
    'url' => 'http://wms.jpl.nasa.gov/wms.cgi?',
    'params' => array('layers' => 'BMNG', 'format' => 'image/png'),
  );

  $info['openlayers_layers_osm_mapnik'] = new StdClass();
  $info['openlayers_layers_osm_mapnik']->api_version = 1;
  $info['openlayers_layers_osm_mapnik']->name = 'openlayers_layers_osm_mapnik';
  $info['openlayers_layers_osm_mapnik']->title = t('OSM Mapnik');
  $info['openlayers_layers_osm_mapnik']->description = t('A \'Mapnik style\' free and opensource street map by OpenStreetMap.');
  $info['openlayers_layers_osm_mapnik']->data = array (
    'projection' => array('900919'),
    'baselayer' => TRUE,
    'type' => 'XYZ',
    'url' => 'http://tile.openstreetmap.org/${z}/${x}/${y}.png',
  );

  $info['openlayers_layers_osm_tah'] = new StdClass();
  $info['openlayers_layers_osm_tah']->api_version = 1;
  $info['openlayers_layers_osm_tah']->name = 'openlayers_layers_osm_tah';
  $info['openlayers_layers_osm_tah']->title = t('OSM Tiles@Home');
  $info['openlayers_layers_osm_tah']->description = t('Tiles@Home map by OpenStreetMap.');
  $info['openlayers_layers_osm_tah']->data = array (
    'projection' => array('900919'),
    'type' => 'XYZ',
    'baselayer' => TRUE,
    'url' => 'http://tah.openstreetmap.org/Tiles/tile/${z}/${x}/${y}.png',
  );

  $info['openlayers_layers_osm_cycle'] = new StdClass();
  $info['openlayers_layers_osm_cycle']->api_version = 1;
  $info['openlayers_layers_osm_cycle']->name = 'openlayers_layers_osm_cycle';
  $info['openlayers_layers_osm_cycle']->title = t('OSM Cycling Map');
  $info['openlayers_layers_osm_cycle']->description = t('A cycling map using data from OpenStreetMap. Brought to you by CloudMade.');
  $info['openlayers_layers_osm_cycle']->data = array (
    'projection' => array('900919'),
    'type' => 'XYZ',
    'baselayer' => TRUE,
    'url' => 'http://andy.sandbox.cloudmade.com/tiles/cycle/${z}/${x}/${y}.png',
  );

  $info['openlayers_layers_cloudmade'] = new StdClass();
  $info['openlayers_layers_cloudmade']->api_version = 1;
  $info['openlayers_layers_cloudmade']->name = 'openlayers_layers_cloudmade';
  $info['openlayers_layers_cloudmade']->title = t('CloudMade');
  $info['openlayers_layers_cloudmade']->description = t('CloudMade tiles.  See <a href="http://www.cloudmade.com/">CloudMade</a>.');
  $info['openlayers_layers_cloudmade']->data = array (
    'projection' => array('900919'),
    'baselayer' => TRUE,
    'options' => array(
      'key' => variable_get('openlayers_layers_cloudmade_api', ''),
      'styleId' => variable_get('openlayers_layers_cloudmade_style', ''),
    ),
    'file' => $file,
    'callback' => $callback,
  );

  // If Geo module is enabled, create layer for each geo table
  if (module_exists('geo_data')) {
    // Get the data tables loaded from shapefiles, and include them as available layers
    $geo_tables  = geo('tables', '/^content_field/');
    foreach ($geo_tables as $key => $table) {
      $info[$key] = new StdClass();
      $info[$key]->api_version = 1;
      $info[$key]->name = $key;
      $info[$key]->title = t('Geo Table (@key)', array('@key' => $key));
      $info[$key]->description = t('A table imported from a shapfile using the geo_data module');
      $info[$key]->data = array (
        'baselayer' => FALSE,
        'type' => 'Vector',
        'file' => $file,
        'callback' => 'openlayers_layers_process_geo_data_layers',
      );
    }
  }
  
  return $info;
}
*/
