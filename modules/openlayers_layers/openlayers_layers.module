<?php
// $Id$

/**
 * @file
 * This file holds the main Drupal hook functions 
 * and private functions for the openlayers_layers module.
 */

/**
 * Implementation of hook_help
 */
function openlayers_layers_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers_layers':
      $output = '<p>'. t('Provides a wide variety of freely available layers.') .'</p>';
  }
  return $output;
}

/**
 * Implemnetation of hook_openlayers_layers_handler
 *
 * Define Layer Types that won't be used outside of this module such as Google Maps, Yahoo Maps, and MS Virtual Earth
 */
function openlayers_layers_openlayers_layers_handler_info($map = array()) {
  
  return array(
    'KML' => array(
      'layer_handler' => 'openlayersLayerHandlerKML',
      'js_file' => drupal_get_path('module', 'openlayers_layers') .'/js/openlayers_layers_layers.js',
    ),
    'XYZ' => array(
      'layer_handler' => 'openlayersLayerHandlerXYZ',
      'js_file' => drupal_get_path('module', 'openlayers_layers') .'/js/openlayers_layers_layers.js',
    ),
    'Google' => array(
      'layer_handler' => 'openlayersLayerHandlerGoogle',
      'js_file' => drupal_get_path('module', 'openlayers_layers') .'/js/openlayers_layers_layers.js',
    ),
    'VirtualEarth' => array(
      'layer_handler' => 'openlayersLayerHandlerVirtualEarth',
      'js_file' => drupal_get_path('module', 'openlayers_layers') .'/js/openlayers_layers_layers.js',
    ),
    'Yahoo' => array(
      'layer_handler' => 'openlayersLayerHandlerYahoo',
      'js_file' => drupal_get_path('module', 'openlayers_layers') .'/js/openlayers_layers_layers.js',
    ),
    'OSM' => array(
      'layer_handler' => 'openlayersLayerHandlerOSM',
      'js_file' => drupal_get_path('module', 'openlayers_layers') .'/js/openlayers_layers_layers.js',
    ),
  );
}


/**
 * Implementation of hook_openlayers_layers_info
 */
function openlayers_layers_openlayers_layers_info() {
  $file = drupal_get_path('module', 'openlayers_layers') .'/includes/openlayers_layers.layers.inc';
  $callback = 'openlayers_layers_process_layers';
  $info = array();
  
  // Define info array
  $info['openlayers_layers_nasa_global_mosaic'] = array(
    'name' => t('NASA Global Mosaic'),
    'description' => t('A high resolution global image mosaic of the earth, produced from 1999-2003 Landsat7 scenes. The highest resolution has a resolution of 15 meters.'),
    'file' => $file,
    'callback' => $callback,
  );
  
  $info['openlayers_layers_nasa_daily_planet'] = array(
    'name' => t('NASA Daily Planet'),
    'description' => t('This layer is the most current, near-global image of the earth available. It is a countinuously updating image from the MODIS TERRA satellite'),
    'file' => $file,
    'callback' => $callback,
  );
  
  $info['openlayers_layers_nasa_blue_marble'] = array(
    'name' => t('NASA Blue Marbel'),
    'description' => t('Blue Marble Next Generation, A MODIS-derived 500m true color earth dataset showing seasonal dynamics. This version of the BMNG was updated June 2007'),
    'file' => $file,
    'callback' => $callback,
  );
  
  $info['openlayers_layers_open_aerial'] = array(
    'name' => t('Open Aerial (2.8+) (do not use)'),
    'description' => t('OpenAerialMap is an open collection of aerial photographs, collected into a single coherent view of the world.'),
    'file' => $file,
    'callback' => $callback,
  );
  
  $info['openlayers_layers_google_street'] = array(
    'name' => t('Google Street'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_google_satellite'] = array(
    'name' => t('Google Satellite'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_google_hybrid'] = array(
    'name' => t('Google Hybrid'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_google_physical'] = array(
    'name' => t('Google Physical'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_yahoo_street'] = array(
    'name' => t('Yahoo Street'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_yahoo_satellite'] = array(
    'name' => t('Yahoo Satellite'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_yahoo_hybrid'] = array(
    'name' => t('Yahoo Hybrid'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_virtual_earth_street'] = array(
    'name' => t('Virtual Earth Street'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_virtual_earth_satellite'] = array(
    'name' => t('Virtual Earth Satellite'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_virtual_earth_hybrid'] = array(
    'name' => t('Virtual Earth Hybrid'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_osm_mapnik'] = array(
    'name' => t('OSM Mapnik'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_osm_tah'] = array(
    'name' => t('OSM Tiles@Home'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  $info['openlayers_layers_osm_cycle'] = array(
    'name' => t('OSM Cycling Map'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );

  $info['openlayers_layers_osm_4326_hybrid'] = array(
    'name' => t('OSM Overlay'),
    'description' => t('Semi-transparent hybrid overlay. Projectd into WSG84 for use on non spherical-mercator maps.'),
    'file' => $file,
    'callback' => 'openlayers_layers_process_layers',
  );
  
  // Module Dependant Layer Instances
  if (module_exists('kml')){
    $info['openlayers_layers_local_kml'] = array(
      'name' => t('Local KML Feed'),
      'file' => $file,
      'callback' => 'openlayers_layers_process_layers',
    );
  }
  
  return $info;
}

/**
 * Implementation of hook_openlayers_map_alter
 * 
 * This checks to see if we are using Google Maps, Yahoo Maps, or MS Virtual Earth
 * and if we are then include the API JS files.
 * @@TODO: Is this the best place to put this???
 */
 
 function openlayers_layers_openlayers_map_alter($map){
  
  $include_google = false;
  $include_yahoo = false;
  $include_virtual_earth = false;
  
  foreach ($map['layers'] as $layer){
    if ($layer['type'] == "Google") $include_google = true;
    if ($layer['type'] == "Yahoo") $include_yahoo = true;
    if ($layer['type'] == "VirtualEarth") $include_virtual_earth = true;
  }
  
  if ($include_google) drupal_set_html_head('<script src="'. check_url("http://maps.google.com/maps?file=api&amp;v=2&amp;sensor=true_or_false&amp;key=abc123xyz") .'" type="text/javascript"></script>');
  if ($include_yahoo) drupal_set_html_head('<script src="'. check_url("http://api.maps.yahoo.com/ajaxymap?v=3.0&appid=abc123xyz") .'" type="text/javascript"></script>');
  if ($include_virtual_earth) drupal_set_html_head('<script src="'. check_url("http://dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.1") .'" type="text/javascript"></script>');
  
}