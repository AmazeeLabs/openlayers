<?php
// $Id$

/**
 * @file
 * This file holds the functions for the installing
 * and enabling of the openlayers module.
 *
 * @ingroup openlayers
 */

/**
 * Implementation of hook_install().
 */
function openlayers_install() {
  // Create tables
  drupal_install_schema('openlayers');
}

/**
 * Implementation of hook_uninstall().
 */
function openlayers_uninstall() {
  // Remove tables
  drupal_uninstall_schema('openlayers');

  // Get module variables
  $results = db_query("SELECT v.name FROM {variable} AS v WHERE v.name LIKE '%s%%'", 'openlayers_');
  // Remove variables
  while ($row = db_fetch_array($results)) {
    variable_del($row['name']);
  }
}

/**
 * Implementation of hook_schema().
 */
function openlayers_schema() {
  $schema = array();

  // Maps table (ctools extras)
  $schema['openlayers_map_presets'] = array(
    'description' => 'Storage for User defined OpenLayers map presets.',
    'export' => array(
      'key' => 'name',
      'identifier' => 'openlayers_presets',
      'default hook' => 'openlayers_presets',
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'openlayers_presets',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'description' => t('The primary identifier for the preset.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => t('The title of the preset.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => t('The description of the preset.'),
        'type' => 'text',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => t('The serialized map.'),
        'type' => 'text',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );

  // Layer table (ctools extras)
  $schema['openlayers_layers'] = array(
    'description' => 'Storage for user defined OpenLayers layers.',
    'export' => array(
      'key' => 'name',
      'identifier' => 'openlayers_layers',
      'default hook' => 'openlayers_layers_info',
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'openlayers_layers',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Layer name.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Layer title.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Layer description.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Layer data serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('name'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );

  // Styles table (ctools extras)
  $schema['openlayers_styles'] = array(
    'description' => 'Storage for user defined OpenLayers styles.',
    'export' => array(
      'key' => 'name',
      'identifier' => 'openlayers_styles',
      'default hook' => 'openlayers_styles_info',
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'openlayers_styles',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Style name.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Style title.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Style description.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Style data serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('name'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Implmentation of hook_update_N().
 */
function openlayers_update_6200() {
  $ret = array();
  $version = drupal_get_installed_schema_version('openlayers');
  
  // Because we already have two different versions of this
  // module that are not meant to be compatible, we have to
  // check what version we are coming from and do the correct
  // update.
  if ($version > 6000 && $version < 6100) {
    // 0.x to 2.x update.  Nothing to do.
  }
  else {
    // 1.x to 2.x update.
    // TO DO: make magic happen.
  } 
  
  return $ret;
}