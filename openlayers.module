<?php
// $Id$

/**
 * @defgroup openlayers OpenLayers: Provides an API and Modules to interface with OpenLayers
 *
 * Provides an API and Modules to interface with OpenLayers.  Needs work...
 */

/**
 * @defgroup openlayers_api OpenLayers API: Specific functions that are part of the OpenLayers API
 *
 * Provides an API and Modules to interface with OpenLayers.  Needs work...
 */

/**
 * @file
 * Main OpenLayers API File
 *
 * This file holds the main Drupal hook functions,
 * and the openlayers API functions for the openlayers module.
 *
 * @ingroup openlayers
 */

/**
 * Map ID Prefix
 */
define('OPENLAYERS_MAP_ID_PREFIX', 'openlayers-map-auto-id');

/**
 * Implementation of hook_help().
 */
function openlayers_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#openlayers':
      $output = '<p>'. t('The OpenLayers module is the base module for the OpenLayer suite of modules, and provides the main API.') .'</p>';
      return $output;

  }
}

/**
 * Implementation of hook_perm().
 */
function openlayers_perm() {
  return array('administer openlayers');
}

/**
 * Implementation of hook_theme().
 */
function openlayers_theme($existing, $type, $theme, $path) {
  return array(
    'openlayers_map' => array(
      'arguments' => array(
        'map' => array(),
      ),
      'file' => 'includes/openlayers.theme.inc',
    ),
    'openlayers_vector_styles' => array(
      'arguments' => array(
        'styles' => array(),
        'map' => array(),
      ),
      'file' => 'includes/openlayers.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function openlayers_menu() {
  $items = array();

  $items['admin/settings/openlayers'] = array(
    'title' => 'OpenLayers',
    'description' => 'Main settings for OpenLayers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_admin_settings'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/settings/openlayers/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  return $items;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function openlayers_ctools_plugin_api($module, $api) {
  // Define plugins for OpenLayers plugins api
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_presets':
        return array('version' => 1);
        
      case 'openlayers_layers':
        return array('version' => 1);
        
      case 'openlayers_styles':
        return array('version' => 1);
        
    }
  }
}

/**
 * Intialize OpenLayers
 *
 * Make sure that we have everything we need for OpenLayers
 *
 * @ingroup openlayers_api
 * @param $params
 *   Associative array of pamaters
 *   (none at the moment)
 * @return
 *   Boolean if intialization was succesful
 */
function openlayers_initialize() {
  $success = TRUE;

  // Include the OpenLayers JS
  // We need to check if it a local path or URL, but really only need to do it once.
  static $included = FALSE;
  if ($included == FALSE) {
    $path = check_plain(variable_get('openlayers_source', 'http://openlayers.org/dev/OpenLayers.js'));
    // Check for full URL
    if (valid_url($path, TRUE)) {
      // If URL, we have to manually include it in Drupal
      drupal_set_html_head('<script src="'. check_url($path) .'" type="text/javascript"></script>');
    }
    else {
      drupal_add_js($path);
    }

    // Add CSS
    drupal_add_css(drupal_get_path('module', 'openlayers') .'/openlayers.css', 'module');
    // Add base JS file
    drupal_add_js(drupal_get_path('module', 'openlayers') .'/js/openlayers.js', 'module');
    drupal_add_js(drupal_get_path('module', 'openlayers') .'/js/openlayers.helper.js', 'module');
    $included = TRUE;
  }

  return $success;
}

/**
 * Render Map
 *
 * Given perimeters, render an OpenLayers map
 *
 * @ingroup openlayers_api
 * @param $map
 *   Associative array of map paramters
 * @param $render
 *   Boolean whether to fully render (include theme and JS)
 *
 * @return
 *   Boolean if successful
 */
function openlayers_render_map($map = array(), $render = TRUE) {
  // Check array
  if (!is_array($map) && !is_string($map)) {
    return FALSE;
  }
  
  // If the map is an empty array or string, then load the default preset. 
  if (empty($map)) {
    $map = openlayers_get_default_map();
  }
  // If it's a non-empty string then load the preset specified.
  elseif (is_string($map)) {
    $preset = openlayers_preset_load($map);
    $map = $preset->data;
  }

  // Intialize
  if (openlayers_initialize() == FALSE) {
    return FALSE;
  }

  // Include extra rendering functions
  module_load_include('inc', 'openlayers', 'includes/openlayers.render');
  
  // Check ID
  if (!$map['id']) {
    $map['id'] = _openlayers_create_map_id();
  }
  
  // Hook for map alteration
  drupal_alter('openlayers_map_preprocess', $map);  

  // Debug pre-render
  _openlayers_render_debug_map('pre-render', $map);
  
  // Process layers
  $map['layers'] = _openlayers_layers_process($map['layers'], $map);
  // Process behaviors
  $map['behaviors'] = _openlayers_behaviors_process($map['behaviors'], $map);
  // Process styles
  $map['styles'] = _openlayers_styles_process($map['styles'], $map['layer_styles'], $map);

  // Hook for one last alter (this should be changed to _postprocess for 2.x)
  drupal_alter('openlayers_map', $map);

  // Check our map for errors. If we are rendering it, then log errors.
  $errors = openlayers_error_check_map($map, $render);
  
  // Add JS and theme if no errors found
  if (!$errors && $render) {
    // Add map container to drupal JS settings
    $openlayers = array(
      'openlayers' => array(
        'maps' => array(
          $map['id'] => $map,
        ),
      ),
    );
    drupal_add_js($openlayers, 'setting');

    // Add themed HTML (no need for it to go to JS)
    $map['themed'] = theme('openlayers_map', $map);

    // Debug post-render
    _openlayers_render_debug_map('post-render', $map);
  }
  
  // Return map with or without errors
  return $map;
}

/**
 * Get all behaviors.
 *
 * Use CTools to get all openlayers behaviors plugins
 * with context.
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset cache or not.
 * @return
 *   Array of behavior info.
 */
function openlayers_behaviors($reset = FALSE) {
  ctools_include('plugins');
  ctools_include('context');
  return ctools_get_plugins('openlayers', 'behaviors');
}

/**
 * Get all openlayers layers.
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset cache or not
 * @return
 *   array of layer info
 */
function openlayers_layers($reset = TRUE) {
  ctools_include('export');
  $layers = ctools_export_load_object('openlayers_layers', 'all', array(), $reset);
    
  return $layers;
}

//@@TODO: This seems really inefficient. Should we use ctools_export_load_object?  -- phayes
/**
 * Menu loader for layers.
 */
function openlayers_layer_load($name) {
  $layers = openlayers_layers();
  return !empty($layers[$name]) ? $layers[$name] : FALSE;
}

/**
 * Save layer.
 */
function openlayers_layer_save($layer) {
  if (!empty($layer->name)) {
    $exists = db_result(db_query("SELECT name FROM {openlayers_layers} WHERE name = '%s'", $layer->name));
    return $exists ? drupal_write_record('openlayers_layers', $layer, 'name') : drupal_write_record('openlayers_layers', $layer);
  }
  return FALSE;
}

/**
 * Get all openlayers styles.
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset cache or not
 * @return
 *   array of styles info
 */
function openlayers_styles($reset = FALSE) {
  ctools_include('export');
  $styles = ctools_export_load_object('openlayers_styles', 'all', array(), $reset);
  return $styles;
}

/**
 * Menu loader for styles.
 */
function openlayers_style_load($name) {
  $styles = openlayers_styles();
  return !empty($styles[$name]) ? $styles[$name] : FALSE;
}

/**
 * Save style.
 */
function openlayers_style_save($style) {
  if (!empty($style->name)) {
    $exists = db_result(db_query("SELECT name FROM {openlayers_styles} WHERE name = '%s'", $style->name));
    return $exists ? drupal_write_record('openlayers_styles', $style, 'name') : drupal_write_record('openlayers_styles', $style);
  }
  return FALSE;
}

/**
 * Get All Presets
 *
 * Get Presets from DB or code, via cache
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset or not
 * @return
 *   Return formatted data
 */
function openlayers_presets($reset = FALSE) {
  ctools_include('export');
  $presets = ctools_export_load_object('openlayers_map_presets', 'all', array(), $reset);
  return $presets;
}

/**
 * OpenLayers Get Preset
 *
 * Given an a string, get full preset object
 *
 * @ingroup openlayers_api
 * @param $name
 *   Name of preset
 * @param $reset
 *   Boolean whether to reset cache
 * @return
 *   Preset object or array
 */
function openlayers_preset_load($name = '', $reset = FALSE) {
  ctools_include('export');
  $presets = ctools_export_load_object('openlayers_map_presets', 'names', array($name), $reset);
  return !empty($presets[$name]) ? $presets[$name] : FALSE;
}

/**
 * OpenLayers Save Preset
 *
 * Given a preset object, save
 *
 * @ingroup openlayers_api
 * @param $preset
 *   Preset object
 * @return
 *   Boolean of whether successful
 */
function openlayers_save_preset($preset = array()) {
  // Check name
  if (!empty($preset->name)) {
    // Check if preset exists
    $query = "SELECT name FROM {openlayers_map_presets} WHERE name = '%s'";
    $exists = db_result(db_query($query, $preset->name));
    
    // Write record depending on existence
    return $exists ? drupal_write_record('openlayers_map_presets', $preset, 'name') : drupal_write_record('openlayers_map_presets', $preset);
  }
  
  return FALSE;
}

/**
 * OpenLayers Get Map
 *
 * Given an a string or integer, get just map array
 *
 * @ingroup openlayers_api
 * @param $name
 *   The preset name
 * @return
 *   Array of preset data
 */
function openlayers_get_map($name = '') {
  // Get preset
  $preset = openlayers_preset_load($name);

  // Check for data
  if (is_array($preset->data)) {
    return $preset->data;
  }
  else {
    return array();
  }
}

/**
 * Get Preset Options
 * 
 * Get preset options in an array suitable for a FormAPI element.
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset or not
 * @return
 *   Return formatted data
 */
function openlayers_preset_options($reset = FALSE) {
  $options = array();
  
  // Get all presets and get only name and title
  $presets = openlayers_presets($reset);
  foreach ($presets as $preset) {
    $options[$preset->name] = $preset->title;
  }
  
  return $options;
}

/**
 * Get Default Map
 *
 * Gets default map as determined by admin setting
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether get cached version or not
 * @return
 *   Map array
 */
function openlayers_get_default_map($reset = FALSE) {
  static $preset = array();
  static $searched = FALSE;

  if (!$searched || $reset) {
    // Get preset
    $preset = openlayers_preset_load(variable_get('openlayers_default_preset', 'default'));
    // If for some reason, we still dont have a map
    // try to get just default
    if (empty($preset)) {
      $preset = openlayers_preset_load('default');
    }
    $searched = TRUE;
  }

  // Return map data
  return $preset->data;
}

/**
 * Merge Maps
 *
 * Recursive function to merge maps.  PHP's array_merge_recursive
 * creates unnecesary arrays to values if keys are the same.  This
 * function simply overwrites a value, even if the key is numeric.
 *
 * @ingroup openlayers_api
 * @param $map1
 *   Map array that holds values that are not preferred
 * @param $map2
 *   Map array that holds values that are preferred
 * @return
 *   map array
 */
function openlayers_merge_maps($map1 = array(), $map2 = array()) {
  // Check maps
  if (is_array($map1) && is_array($map2)) {
    foreach ($map2 as $k => $v) {
      if (isset($map1[$k]) && is_array($v) && is_array($map1[$k])) {
        $map1[$k] = openlayers_merge_maps($map1[$k], $v);
      }
      else {
        $map1[$k] = $v;
      }
    }
  }

  return $map1;
}

/**
 * Check Map Errors
 *
 * Checks map array for incompatibilities or errors.
 *
 * @ingroup openlayers_api
 * @param $map
 *   Map array
 * @param $log_errors
 *   Boolean whether to log erros
 * @return
 *   FALSE if passed. Array of descriptive errors if fail
 */
function openlayers_error_check_map(&$map, $log_errors = TRUE) {
  // @TODO: Instead of manually specifying projections, we should do a lookup on the projections in a big table to get variables that it should be checked against.
  // @TODO: For next release, make hook
  $errors = array();

  // Check layer projections
  foreach ($map['layers'] as $layer) {
    if ($layer['projection']) {
      if (!in_array($map['projection'], $layer['projection'])) {
        $errors[] = t('The layer %layer_name cannot work with the map projection: EPSG: %map_proj', array(
          '%layer_name' => $layer['name'],
          '%map_proj' => $map['projection'],
        ));
      }
    }
  }

  // If we are using a web spherical mercator projection and maxResolution
  // and maxExtent are not set the map will not function.
  if ($map['projection'] == '900913' || $map['projection'] == '3785') {
    if (!$map['options']['maxExtent'] || !$map['options']['maxResolution']) {
      $errors[] = t('You are using a web spherical mercator projection.  However maxExtent or maxResolution are not set.');
    }
  }

  // If we are using a degree based projection, then check to make sure
  // our bounds are not over 180/90 degrees
  if ($map['projection'] == '4326' || $map['projection'] == '4269') {
    if (
      ($map['options']['maxExtent']['top']     && $map['options']['maxExtent']['top']    > 90)   ||
      ($map['options']['maxExtent']['bottom']  && $map['options']['maxExtent']['bottom'] < -90)  ||
      ($map['options']['maxExtent']['left']    && $map['options']['maxExtent']['left']   < -180) ||
      ($map['options']['maxExtent']['right']   && $map['options']['maxExtent']['right']  > 180)  ||
      ($map['options']['maxResoluton']         && $map['options']['maxResoluton']        > 180)
    ) {
      $errors[] = t("Your Maximum Extents are set greater than 180/90 degrees. Try Maximum Extent of: -180,180,-90,90 and a Maximum Resolution of 1.40625");
    }
  }

  // Check if any errors found to log
  if (count($errors) > 0 && $log_errors) {
    // Log the Error(s)
    watchdog('openlayers', implode(', ', $errors), array(), WATCHDOG_ERROR);
  }
  
  // Store the errors in our map array
  if (count($errors) > 0) {
    // Store the errors in our map array
    $map['errors'] = $errors;
  }

  // Check if errors and return
  return (count($errors) > 0) ? $errors : FALSE;
}

/**
 * Implementation of hook_openlayers_layers_handler_info().
 */
function openlayers_openlayers_layers_handler_info($map = array()) {
  return array(
    'WMS' => array(
      'layer_handler' => 'WMS',
      'js_file' => drupal_get_path('module', 'openlayers') .'/js/openlayers.layers.js',
    ),
    'Vector' => array(
      'layer_handler' => 'Vector',
      'js_file' => drupal_get_path('module', 'openlayers') .'/js/openlayers.layers.js',
    ),
  );
}

/**
 * Implementation of hook_openlayers_layers_info().
 */
function openlayers_openlayers_layers_info() {
  $layers = array();
  
  $layer = new StdClass();
  $layer->api_version = 1;
  $layer->name = 'openlayers_default_wms';
  $layer->title = t('Default OpenLayers WMS');
  $layer->description = t('A simple basemap to get you started');
  $layer->data = array(
    'projection' => array('4326', '900913', '4269'),
    'baselayer' => TRUE,
    'type' => 'WMS',
    'url' => 'http://labs.metacarta.com/wms/vmap0',
    'params' => array('layers' => 'basic')
  );
  
  $layers[$layer->name] = $layer;

  return $layers;
}

/**
 * Implementation of hook_openlayers_styles_info
 */
function openlayers_openlayers_styles_info() {
  $styles = array();
  
  // Default style
  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'default';
  $style->title = t('Default style');
  $style->description = t('Basic default style.');
  $style->data = array(
    'pointRadius' => 5,
    'fillColor' => '#FFCC66',
    'strokeColor' => '#FF9933',
    'strokeWidth' => 4,
    'fillOpacity' => 0.5
  );
  $styles[$style->name] = $style;

  // Default select style
  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'default_select';
  $style->title = t('Default select style');
  $style->description = t('Default style for selected geometries');
  $style->data = array(
    'pointRadius' => 5,
    'fillColor' => '#66CCFF',
    'strokeColor' => '#3399FF',
    'strokeWidth' => 4,
    'fillOpacity' => 0.5
  );
  $styles[$style->name] = $style;

  return $styles;
}

/**
 * Implementation of hook_openlayers_presets().
 */
function openlayers_openlayers_presets() {
  $default = new stdClass();

  // Create map array
  $default_map = array(
    'projection' => '4326',
    'width' => 'auto',
    'default_layer' => 'openlayers_default_wms',
    'height' => '300px',
    'center' => array(
      'lat' => '0',
      'lon' => '0',
      'zoom' => '2',
    ),
    'options' => array(
      'displayProjection' => '4326',
    ),
    'behaviors' => array(
      'openlayers_behavior_layerswitcher' => TRUE,
      'openlayers_behavior_navigation' => TRUE,
      'openlayers_behavior_panzoombar' => TRUE,
      'openlayers_behavior_mouseposition' => TRUE,
    ),
  );
  
  // Create full preset array
  $default->api_version = 1;
  $default->name = 'default';
  $default->title = t('Default Map');
  $default->description = t('This is the default map preset that comes with the OpenLayers module.');
  $default->data = $default_map;

  // Return preset(s) in an array
  return array(
    'default' => $default,
  );
}

/**
 * Interface for openlayers_behaviors.
 *
 * Interface for behavior classes.  TODO: DOCUMENT!
 */
interface openlayers_behavior_interface {
  function __construct($options = array(), $map = array());
  function options_init();
  function options_form();
  function render(&$map);
}

/**
 * OpenLayers Behavior Base Class
 * 
 * We define base classes in the core module.
 * All other parent classes can be autoloaded through ctools.
 * TODO: DOCUMENT!
 */
class openlayers_behavior implements openlayers_behavior_interface {
  var $options, $map;

  function __construct($options = array(), $map = array()) {
    $get_options = $this->options_init();
    $this->options = (is_array($get_options) && is_array($options)) ? $options + $get_options : $options;
    $this->map = $map;
  }

  function options_init() {
    return array();
  }

  function options_form() {
    return array();
  }

  function render(&$map) {}
}

/**
 * Implementation of hook_openlayers_behaviors().
 */
function openlayers_openlayers_behaviors() {
  $include_path = drupal_get_path('module', 'openlayers') .'/includes/behaviors';
  $parent = $parent;

  return array(
    'openlayers_behavior_attribution' => array(
       'title' => t('Attribution'),
       'description' => t('Allows layers to provide attribution to the map if it exists.'),
       'type' => 'layer',
       'path' => $include_path,
       'behavior' => array(
         'class' => 'openlayers_behavior_attribution',
         'parent' => $parent,
       ),
     ),
    'openlayers_behavior_keyboarddefaults' => array(
       'title' => t('Keyboard Defaults'),
       'description' => t('Provides a the ability to use the keyboard to pan and zoom map.'),
       'type' => 'layer',
       'path' => $include_path,
       'behavior' => array(
         'class' => 'openlayers_behavior_keyboarddefaults',
         'parent' => $parent,
       ),
     ),
    'openlayers_behavior_layerswitcher' => array(
       'title' => t('Layer Switcher'),
       'description' => t('Gives user ability to switch Layers in the map interface.'),
       'type' => 'map',
       'path' => $include_path,
       'behavior' => array(
         'class' => 'openlayers_behavior_layerswitcher',
         'parent' => $parent,
       ),
     ),
    'openlayers_behavior_mouseposition' => array(
       'title' => t('Mouse Position'),
       'description' => t('Gives a visual indication of the mouse position to the user.'),
       'type' => 'map',
       'path' => $include_path,
       'behavior' => array(
         'class' => 'openlayers_behavior_mouseposition',
         'parent' => $parent,
       ),
     ),
    'openlayers_behavior_navigation' => array(
       'title' => t('Navigation'),
       'description' => t('Gives the user the ability to navigate the map interface.'),
       'type' => 'map',
       'path' => $include_path,
       'behavior' => array(
         'class' => 'openlayers_behavior_navigation',
         'parent' => $parent,
       ),
     ),
     'openlayers_behavior_dragpan' => array(
      'title' => t('DragPan'),
      'description' => t('Gives user ability to pan in the map interface.'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_dragpan',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_panzoombar' => array(
      'title' => t('PanZoomBar'),
      'description' => t('Gives user ability to pan and zoom in the map interface.'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_panzoombar',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_mapformvalues' => array(
      'title' => t('Map Form Values'),
      'description' => t('Private method for admin UI'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_mapformvalues',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_boxselect' => array(
      'title' => t('Boxselect'),
      'description' => t('Allows the selection and display of a box.'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_boxselect',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_crosshair' => array(
      'title' => t('Crosshair'),
      'description' => t('Creates a crosshair at the center of the map'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_crosshair',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_permalink' => array(
      'title' => t('Permalink'),
      'description' =>  t('Prvides a URL that will link to a specific map position.'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_permalink',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_scaleline' => array(
      'title' => t('Scale Line'),
      'description' => t('Provides the user with a line of scale in the map interface.'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_scaleline',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_zoombox' => array(
      'title' => t('Zoom Box'),
      'description' => t('Allows user to draw a box on screen to zoom with Shift + Click.'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_zoombox',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_zoomtomaxextent' => array(
      'title' => t('Zoom to Max Extent'),
      'description' => t('Provides button to zoom to the maximum extent of the map.'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_zoomtomaxextent',
        'parent' => $parent,
      ),
    ),
    'openlayers_behavior_overviewmap' => array(
      'title' => t('Overview Map (broken)'),
      'description' => t('Provides an overview map (needs work).'),
      'type' => 'map',
      'path' => $include_path,
      'behavior' => array(
        'class' => 'openlayers_behavior_overviewmap',
        'parent' => $parent,
      ),
    ),
  );
}