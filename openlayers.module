<?php
// $Id$

/**
 * @file
 * This file holds the main Drupal hook functions 
 * and private functions for the openlayers module.
 */

/**
 * Map ID Prefix
 */
define('OPENLAYERS_MAP_ID_PREFIX', 'openlayers-map-auto-id');

/**
 * Implementation of hook_help
 */
function openlayers_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers':
      $output = '<p>' . t('The OpenLayers module is the base module for the OpenLayer suite of modules, and provides the main API.') . '</p>';
  }
  
  return $output;
}

/**
 * Implementation of hook_perm
 */
function openlayers_perm() {
  return array('administer openlayers');
}

/**
 * Implementation of hook_menu
 */
function openlayers_menu() {
  $items = array();

  $items['admin/settings/openlayers'] = array(
	'title' => 'OpenLayers',
	'description' => t('Set some defaults for OpenLayer maps.'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('openlayers_admin_settings'),
	'access arguments' => array('administer openlayers'),
  'file' => 'includes/openlayers.admin.inc',
	'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Intialize OpenLayers
 *
 * Make sure that we have everything we need for OpenLayers
 *
 * @ingroup API
 * @param $params
 *   Associative array of pamaters
 *   (none at the moment)
 * @return
 *   Boolean if intialization was succesful
 */
function openlayers_intialize() {
  $success = TRUE;
  
  // Include the OpenLayers JS
  // We need to check if it a local path or URL, but really only need to do it once.
  static $included = FALSE;
  if ($included == FALSE) {
    $path = check_plain(variable_get('openlayers_source', 'http://openlayers.org/api/OpenLayers.js'));
    // Check for full URL
    if (valid_url($path, TRUE)) {
      // If URL, we have to manually include it in Drupal
      drupal_set_html_head('<script src="' . check_url($path) . '" type="text/javascript"></script>');
      $included = TRUE;
    }
    else {
      drupal_add_js($path);
      $included = TRUE;
    }
  }

  // Add CSS
  // @@TODO: Use a static variable cache
  drupal_add_css(drupal_get_path('module', 'openlayers') . '/openlayers.css', 'module');

  // Add base JS file
  // @@TODO: Use a static variable cache
  drupal_add_js(drupal_get_path('module', 'openlayers') . '/js/openlayers.js', 'module');
  return $success;
}

/**
 * Render Map
 *
 * Given perimeters, render an OpenLayers map
 *
 * @ingroup API
 * @param $map
 *   Associative array of map paramters
 *  
 * @return
 *   Boolean if successful
 */
function openlayers_render_map($map = array()) {
  // Check array
  if (!is_array($map)) {
    return FALSE;
  }
  
  // Intialize
  if (openlayers_intialize() == FALSE) {
    return FALSE;
  }
  
  // Check ID
  if (!$map['id']) {
    $map['id'] = _openlayers_create_map_id();
  }
  
  // @@TODO: Add an alter hook for array
  
  // Merge with defaults
  $map_default = _openlayers_get_map_defaults();
  // @@TODO: Better merging
  $map = array_merge($map_default, $map); 
  
  // Add map container to drupal JS settings
  $openlayers = array(
    'openlayers' => array(
      'maps' => array(
        $map['id'] => $map,
      ),
    ),
  );
  drupal_add_js($openlayers, 'setting');
  
  return $map;
}

/**
 * Create Map ID
 *
 * Create a unique ID for any maps that are not assigned an ID
 *
 * @note
 *   Technically someone, can assign a map ID identical
 *   to the one that is created
 * @return
 *   New map id
 */
function _openlayers_create_map_id() {
  // Set up variables
  $map_id = '';
  static $map_count = 0;
  // Put together ID
  $map_id = OPENLAYERS_MAP_ID_PREFIX . '-' . $map_count;
  // Add another
  $map_count += 1;
  // Return ID
  return $map_id;
}

/**
 * Get Map Defaults
 *
 * @return
 *   map array
 */
function _openlayers_get_map_defaults() {
  $map_default = array(
    'id' => _openlayers_create_map_id(),
    'width' => 'auto',
    'height' => '300px',
    'center' => array(
      'lat' => 0,
      'lon' => 0,
      'zoom' => 2,
    ),
    'options' => array(
      'numZoomLevels' => 10,
    ),
    'controls' => array(
      'LayerSwitcher' => TRUE,
    ),
    'layers' => array(
      'default_wms' => array(
        'id' => 'default_wms',
        'type'=> 'WMS',
        'name' => t('Default Open Layers WMS'),
        'url' => 'http://labs.metacarta.com/wms/vmap0',
        'params' => array(
          'layers' => 'basic',
        ),
        'options' => array(),
        'events' => array(),
      ),
      'default_vector' => array(
        'id' => 'default_vector',
        'type' => 'Vector',
        'name' => t('Default Vector'),
        'options' => array(),
        'events' => array(),
      ),
    ),
  );
  return $map_default;
}

/**
Super array:

  $map_default = array(
    'id' => _openlayers_create_map_id(),
    'width' => 'auto',
    'height' => '300px',
    'center' => array(
      'lat' => 40,
      'lon' => 5,
      'zoom' => 5,
    ),
    'options' => array(
      'numZoomLevels' => 10,
    ),
    'controls' => array(
      'LayerSwitcher' => TRUE,
    ),
    'layers' => array(
      'default_wms' => array(
        'id' => 'default_wms',
        'type'=> 'WMS',
        'name' => t('Default Open Layers WMS'),
        'url' => 'http://labs.metacarta.com/wms/vmap0',
        'params' => array(
          'layers' => 'basic',
        ),
        'options' => array(),
        'events' => array(
        	'loadstart'=> array(),
        	'loadend' => array(),
        	'loadcancel' => array(),
          'visibilitychanged' => array(),
          'moveend' => array(),
        ),
      ),
      'default_vector' => array(
        'id' => 'default_vector',
        'type' => 'Vector',
        'name' => t('Default Vector'),
        'options' => array(),
        'events' => array(
        	'loadstart'=> array(),
        	'loadend' => array(),
        	'loadcancel' => array(),
          'visibilitychanged' => array(),
          'moveend' => array(),
        ),
      ),
    ),
    'draw_features' => array(
      'point' => array(
        'type' => 'Point',
        'vector' => 'default_vector',
        'featureadded_handler' => 'openlayersDefaultFeatureHandler',
      ),
      'path' => array(
        'type' => 'Path',
        'vector' => 'default_vector',
        'featureadded_handler' => 'openlayersDefaultFeatureHandler',
      ),
      'polygon' => array(
        'type' => 'Polygon',
        'vector' => 'default_vector',
        'featureadded_handler' => 'openlayersDefaultFeatureHandler',
      ),
    ),
    'events' => array(
      'addlayer' => array(''),
    ),
  );
  
*/