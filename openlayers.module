<?php
// $Id$

/**
 * @defgroup openlayers OpenLayers: Provides an API and Modules to interface with OpenLayers
 */

/**
 * @file
 * Main OpenLayers API File
 *
 * This file holds the main Drupal hook functions,
 * and the openlayers API functions for the openlayers module.
 *
 * @ingroup openlayers
 */

/**
 * Implementation of hook_help
 */
function openlayers_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers':
      $output = '<p>'. t('The OpenLayers module is the base module for the OpenLayer suite of modules, and provides the main API.') .'</p>';
  }
  return '';
}

/**
 * Implementation of hook_theme().
 */
function openlayers_theme($existing, $type, $theme, $path) {
  return array(
    'openlayers_map' => array(
      'arguments' => array(
        'map' => array(),
      ),
      'file' => 'includes/openlayers.theme.inc',
    ),
    'openlayers_styles' => array(
      'arguments' => array(
        'styles' => array(),
        'map' => array(),
      ),
      'file' => 'includes/openlayers.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function openlayers_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_presets':
        return array('version' => 1);
      case 'openlayers_layers':
        return array('version' => 1);
      case 'openlayers_styles':
        return array('version' => 1);
    }
  }
}

/**
 * Include necessary CSS and JS for OpenLayers.
 *
 * @ingroup openlayers_api
 */
function openlayers_include() {
  // Use a static variable to prevent running URL check code repeatedly.
  static $once;
  if (!isset($once)) {
    $once = TRUE;

    $path = check_plain(variable_get('openlayers_source', 'http://openlayers.org/dev/OpenLayers.js'));
    // Check for full URL and include it manually if external.
    if (valid_url($path, TRUE)) {
      drupal_set_html_head('<script src="'. check_url($path) .'" type="text/javascript"></script>');
    }
    else {
      drupal_add_js($path);
    }
    drupal_add_css(drupal_get_path('module', 'openlayers') .'/openlayers.css', 'module');
    drupal_add_js(drupal_get_path('module', 'openlayers') .'/js/openlayers.js', 'module');
  }
}

/**
 * Prepare a map for rendering.
 */
function openlayers_build_map($map = array()) {
  openlayers_include();
  module_load_include('inc', 'openlayers', 'includes/openlayers.render');

  // If no map is specified, use the default preset.
  if (empty($map)) {
    if ($preset = openlayers_preset_load(variable_get('openlayers_default_preset', 'default'))) {
      $map = $preset->data;
    }
  }

  // Assign an ID
  $map['id'] = !isset($map['id']) ? _openlayers_create_map_id() : $map['id'];

  $map['layers'] = _openlayers_layers_process($map['layers'], $map);

  // Unset Map Arguments
  // @TODO: research and eliminate
  unset($map['args']);

  $map['behaviors'] = _openlayers_behaviors_process($map['behaviors'], $map);
  $map['styles'] = _openlayers_styles_process($map['styles'], $map['layer_styles'], $map);

  // Hook for one last alter
  drupal_alter('openlayers_map', $map);

  // Check map for errors
  $map['errors'] = openlayers_error_check_map($map);

  return $map;
}

/**
 * Render Map
 *
 * Given parameters, render an OpenLayers map
 *
 * @ingroup openlayers_api
 * @param $map
 *   Associative array of map paramters
 *
 * @return
 *   Boolean if successful
 */
function openlayers_render_map($map = array(), $preset_name = '') {
  $map = openlayers_build_map($map);

  // Return themed map if no errors found
  if (empty($map['errors'])) {
    $js = array('openlayers' => array('maps' => array($map['id'] => $map)));
    if (function_exists('json_encode')) {
      drupal_add_js('Drupal.settings.openlayers = ' . json_encode($js['openlayers']) . ';', 'inline', 'header', TRUE);
    }
    else {
      drupal_add_js($js, 'setting');
    }
    return theme('openlayers_map', $map, $preset_name);
  }
  return '';
}

/**
 * Get layer object
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset cache or not
 * @return
 *   array of layer info
 */
function openlayers_get_layer_object($layer, $map = array()) {
  // Static cache because this function will possibly be called in big loops
  static $layer_types;
  if (!isset($layer_types)) {
    $layer_types = openlayers_layer_types();
  }
  
  // Check that a type is defined
  if (!isset($layer->data['layer_type'])) {
    watchdog('openlayers', 'Layer does not have type correctly defined', WATCHDOG_ERROR);
    return;
  }

  // Attempt to get ctool class
  $class = ctools_plugin_get_class($layer_types[$layer->data['layer_type']], 'layer_type');
  if ($class) {
    $layer_object = new $class($layer, $map);
    return $layer_object;
  }
  else {
    return FALSE;
  }
}


/**
 * Menu loader for layers. %openlayers_layer_export
 * @ingroup openlayers_api
 *
 * @param $name
 *   Layer name
 * @return
 *   Layer export
 */
function openlayers_layer_export_load($name, $reset = TRUE) {
  ctools_include('export');
  $layers = ctools_export_load_object('openlayers_layers', 'all', array($name), $reset);
  return !empty($layers[$name]) ? $layers[$name] : FALSE;
}

/**
 * Get all openlayers layers.
 * @ingroup openlayers_api
 *
 * @param $reset
 *   Boolean whether to reset cache or not
 * @return
 *   layer exports
 */
function openlayers_layers_export_load($reset = TRUE) {
  ctools_include('export');
  $layers = ctools_export_load_object('openlayers_layers', 'all', array(), $reset);
  return $layers;
}

/**
 * Menu loader for layers. (%openlayers_layer)
 * @ingroup openlayers_api
 *
 * @param $name
 *   Layer name
 * @return
 *   Layer export
 */
function openlayers_layer_load($name, $reset = FALSE) {
  ctools_include('export');
  $layer = ctools_export_load_object('openlayers_layers', 'names', array($name), $reset);
  return openlayers_get_layer_object($layer[$name]);
}

/**
 * Get all openlayers layers as objects.
 * @ingroup openlayers_api
 *
 * @param $reset
 *   Boolean whether to reset cache or not
 * @return
 *   array of layer info
 */
function openlayers_layers_load($reset = FALSE) {
  ctools_include('export');
  $layer_objects = array();
  $layers = ctools_export_load_object('openlayers_layers', 'all', array(), $reset);
  foreach ($layers as $layer) {
    $layer_objects[$layer->name] = openlayers_get_layer_object($layer);
  }
  return $layer_objects;
}

/**
 * Save layer.
 * @ingroup openlayers_api
 *
 * @param $layer
 *   Layer object
 * @return
 *   bool for success in saving
 */
function openlayers_layer_save($layer) {
  if (!empty($layer->name)) {
    $exists = db_result(db_query("SELECT name FROM {openlayers_layers} WHERE name = '%s'", $layer->name));
    return $exists ? 
      drupal_write_record('openlayers_layers', $layer, 'name') : 
      drupal_write_record('openlayers_layers', $layer);
  }
  return FALSE;
}

/**
 * Get all behaviors.
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset cache or not.
 * @return
 *   Array of behavior info.
 */
function openlayers_behaviors($reset = FALSE) {
  ctools_include('plugins');
  return ctools_get_plugins('openlayers', 'behaviors');
}

/**
 * Get all layer types.
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset cache or not.
 * @return
 *   Array of behavior info.
 */
function openlayers_layer_types($reset = FALSE) {
  ctools_include('plugins');
  return ctools_get_plugins('openlayers', 'layer_types');
}

/**
 * Get all openlayers styles.
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset cache or not
 * @return
 *   array of styles info
 */
function openlayers_styles($reset = FALSE) {
  ctools_include('export');
  $styles = ctools_export_load_object('openlayers_styles', 'all', array(), $reset);
  return $styles;
}

/**
 * Menu loader for styles.
 */
function openlayers_style_load($name) {
  $styles = openlayers_styles();
  return !empty($styles[$name]) ? $styles[$name] : FALSE;
}

/**
 * Menu loader for layer types.
 *
 * @param
 *   layer type string
 * @return
 *   an instantiated layer type object
 */
function openlayers_layer_type_load($name) {
  ctools_include('plugins');
  if ($layer_type_class = ctools_plugin_load_class('openlayers', 'layer_types', $name, 'layer_type')) {
    $layer_type = new $layer_type_class();
    return $layer_type;
  }
}

/**
 * Save style.
 */
function openlayers_style_save($style) {
  if (!empty($style->name)) {
    $exists = db_result(db_query("SELECT name FROM {openlayers_styles} WHERE name = '%s'", $style->name));
    return $exists ? drupal_write_record('openlayers_styles', $style, 'name') : drupal_write_record('openlayers_styles', $style);
  }
  return FALSE;
}

/**
 *
 * Get Presets from DB or code, via cache
 *
 * @ingroup openlayers_api
 * @param $reset
 *   Boolean whether to reset or not
 * @return
 *   Return formatted data
 */
function openlayers_presets($reset = FALSE) {
  ctools_include('export');
  $presets = ctools_export_load_object('openlayers_map_presets', 'all', array(), $reset);
  return $presets;
}

/**
 * Given a preset name, get full preset object.
 *
 * @ingroup openlayers_api
 * @param $name
 *   Name of preset
 * @param $reset
 *   Boolean whether to reset cache
 * @return
 *   Preset object
 */
function openlayers_preset_load($name = '', $reset = FALSE) {
  ctools_include('export');
  $presets = ctools_export_load_object('openlayers_map_presets', 'names', array($name), $reset);
  return !empty($presets[$name]) ? $presets[$name] : FALSE;
}

/**
 * Save a preset object to the database.
 *
 * @ingroup openlayers_api
 * @param $preset
 *   Array of data for preset
 * @return
 *   Boolean of whether successful
 */
function openlayers_preset_save($preset) {
  if (!empty($preset->name)) {
    $exists = db_result(db_query("SELECT name FROM {openlayers_map_presets} WHERE name = '%s'", $preset->name));
    return $exists ? 
      drupal_write_record('openlayers_map_presets', $preset, 'name') : 
      drupal_write_record('openlayers_map_presets', $preset);
  }
  return FALSE;
}

/**
 * Get preset options in an array suitable for a FormAPI element.
 *
 * @param $reset
 *   Boolean whether to reset or not
 * @return
 *   Return formatted data
 */
function openlayers_preset_options($reset = FALSE) {
  $presets = openlayers_presets($reset);
  $options = array();
  foreach ($presets as $preset) {
    $options[$preset->name] = $preset->title;
  }
  return $options;
}

/**
 * Check Map Errors
 *
 * Checks map array for incompatibilities or errors.
 *
 * @ingroup openlayers_api
 * @param $map
 *   Map array
 * @param $log_errors
 *   Boolean whether to log erros
 * @return
 *   FALSE if passed. Array of descriptive errors if fail
 */
function openlayers_error_check_map($map, $log_errors = TRUE) {
  // @TODO: Instead of manually specifying projections, we should do a lookup on the projections in a big table to get variables that it should be checked against.
  // @TODO: For next release, make hook
  $errors = array();

  if (!is_array($map['layers'])) {
    $errors[] = t('Map contains no renderable layers.');
  }
  else {
    // Check layer projections
    foreach ($map['layers'] as $layer) {
      if ($layer->projection) {
        if (!in_array($map['projection'], $layer->projection)) {
          $errors[] = t('The layer %layer_name cannot work with the map projection: EPSG: %map_proj', array(
            '%layer_name' => $layer->name,
            '%map_proj' => $map['projection'],
          ));
        }
      }
    }
  }

  // TODO: rewrite to use openlayers_get_extent
  // If we are using a degree based projection, then check to make sure
  // our bounds are not over 180/90 degrees
  if ($map['projection'] == '4326' || $map['projection'] == '4269') {
    if (
      ($map['options']['maxExtent']['top']     && $map['options']['maxExtent']['top']    > 90)   ||
      ($map['options']['maxExtent']['bottom']  && $map['options']['maxExtent']['bottom'] < -90)  ||
      ($map['options']['maxExtent']['left']    && $map['options']['maxExtent']['left']   < -180) ||
      ($map['options']['maxExtent']['right']   && $map['options']['maxExtent']['right']  > 180)  ||
      ($map['options']['maxResoluton']         && $map['options']['maxResoluton']        > 180)
    ) {
      $errors[] = t("Your Maximum Extents are set greater than 180/90 degrees. Try Maximum Extent of: -180,180,-90,90 and a Maximum Resolution of 1.40625");
    }
  }

  // Check if any errors found to log
  if (count($errors) > 0 && $log_errors) {
    // Log the Error(s)
    watchdog('openlayers', implode(', ', $errors), array(), WATCHDOG_ERROR);
  }

  // Check if errors and return
  return (count($errors) > 0) ? $errors : FALSE;
}

/**
 * Returns standard world-max-extents for common projections.
 * Layers implementing other projections and subsets of the world should define their
 * maxExtent in the layer array
 * @param projection 900913, 4326
 * @return array of maxExtent in OpenLayers toArray() format
 */
function openlayers_get_extent($projection) {
  switch ($projection) {
    case '900913':
      return array(-20037508.34, -20037508.34, 20037508.34, 20037508.34);
    case '4326':
      return array(-180, -90, 180, 90);
  }
}

/**
 * Returns a default set of resolutions for standard TMS, WMS, etc servers
 * serving up common projections. Layers supporting less common projections and resolutions
 * can easily define custom resolutions arrays
 * @param projection as string specifying which projection this should take, like 900913
 * @return array of resolutions
 */
function openlayers_get_resolutions($projection, $zoom_start = 0, $zoom_end = FALSE) {
  switch ($projection) {
    case '900913':
      // 16 zoom levels, taken from
      // openlayers.org TMS map
      $res = array(
        156543.0339,
        78271.51695,
        39135.758475,
        19567.8792375,
        9783.93961875,
        4891.969809375,
        2445.9849046875,
        1222.99245234375,
        611.496226171875,
        305.7481130859375,
        152.87405654296876,
        76.43702827148438,
        38.21851413574219,
        19.109257067871095,
        9.554628533935547,
        4.777314266967774,
        2.388657133483887,
        1.1943285667419434,
        0.5971642833709717);
      break;
    case '4326':
      // 16 zoom levels, taken from
      // openlayers.org default WMS map
      $res = array(
        0.703125,
        0.3515625,
        0.17578125,
        0.087890625,
        0.0439453125,
        0.02197265625,
        0.010986328125,
        0.0054931640625,
        0.00274658203125,
        0.001373291015625,
        0.0006866455078125,
        0.00034332275390625,
        0.000171661376953125,
        0.0000858306884765625,
        0.00004291534423828125,
        0.000021457672119140625);
      break;
    default:
      $res = array();
      break;
  }
  $length = ($zoom_end == FALSE) ? NULL : $zoom_end - $zoom_start;
  // By default this will not actually clip the array
  $resolutions = array_slice($res, $zoom_start, $length);
  return $resolutions;
}

/**
 * We define base classes in the core module.
 * All other parent classes can be autoloaded through ctools.
 */
class openlayers_behavior {
  var $options, $map;

  function __construct($options = array(), $map = array()) {
    $this->options = $options + $this->options_init();
    $this->map = $map;
  }

  function options_init() {
    return array();
  }

  function options_form() {
    return array();
  }

  function render(&$map) {}
}

/**
 * We define base classes in the core module.
 * All other parent classes can be autoloaded through ctools.
 */
class openlayers_layer_type {
  var $options, $map;

  function __construct($layer = array(), $map = array()) {
    foreach (array('name', 'title', 'description', 'data') as $k) {
      if (isset($layer->{$k})) {
        $this->{$k} = $layer->{$k};
      }
    }
    if (is_array($this->data)) {
      $this->data += $this->options_init();
    }
    $this->map = $map;
  }

  function options_init() {
    return array();
  }

  function options_form() {
    return array();
  }

  /**
   * @return
   *   A version of this layer_type which can be saved,
   *   when attempting to save a modified layer
   */
  function to_record() {
    return array(
      'name' => $this->name,
      'description' => $this->description,
      'title' => $this->title,
      'data' => $this->data
    );
  }

  /**
   * @return
   *   Success value on saving this layer
   */
  function save() {
    if (!empty($this->name)) {
      $exists = db_result(db_query("SELECT name FROM {openlayers_layers} WHERE name = '%s'", $this->name));
      // If this layer exists, specify that 'name' is the primary key for the layer which will be updated
      return $exists ? 
        drupal_write_record('openlayers_layers', $this->to_record(), 'name') : 
        drupal_write_record('openlayers_layers', $this->to_record());
    }
  }

  function render(&$map) {}
}

/**
 * Implementation of hook_openlayers_layers_info.
 */
function openlayers_openlayers_layers_info() {
  module_load_include('inc', 'openlayers', 'includes/openlayers.layers');
  return _openlayers_openlayers_layers_info();
}

/**
 * Implementation of hook_openlayers_behaviors().
 *
 */
function openlayers_openlayers_behaviors() {
  module_load_include('inc', 'openlayers', 'includes/openlayers.behaviors');
  return _openlayers_openlayers_behaviors();
}

/**
 * Implementation of hook_openlayers_styles_info
 */
function openlayers_openlayers_styles_info() {
  $styles = array();

  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'default';
  $style->title = t('Default style');
  $style->description = t('Basic default style.');
  $style->data = array(
    'pointRadius' => 5,
    'fillColor' => '#FFCC66',
    'strokeColor' => '#FF9933',
    'strokeWidth' => 4,
    'fillOpacity' => 0.5
  );
  $styles[$style->name] = $style;

  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'default_select';
  $style->title = t('Default select style');
  $style->description = t('Default style for selected geometries');
  $style->data = array(
    'pointRadius' => 5,
    'fillColor' => '#66CCFF',
    'strokeColor' => '#3399FF',
    'strokeWidth' => 4,
    'fillOpacity' => 0.5
  );
  $styles[$style->name] = $style;

  return $styles;
}

/**
 * Implementation of hook_openlayers_presets.
 */
function openlayers_openlayers_presets() {
  // Create full preset array
  $default = new stdClass();
  $default->api_version = 1;
  $default->name = 'default';
  $default->title = t('Default Map');
  $default->description = t('This is the default map preset that comes with the OpenLayers module.');
  $default->data = array(
    'projection' => '4326',
    'width' => 'auto',
    'default_layer' => 'osm_mapnik',
    'height' => '400px',
    'center' => array(
      'initial' => array(
        'centerpoint' => '0,0',
        'zoom' => '2'
      )
    ),
    'options' => array(
      'displayProjection' => '4326',
      'maxExtent' => openlayers_get_extent('4326'),
    ),
    'behaviors' => array(
      'openlayers_behavior_panzoombar' => array(),
      'openlayers_behavior_layerswitcher' => array(),
      'openlayers_behavior_attribution' => array(),
      'openlayers_behavior_keyboarddefaults' => array(),
      'openlayers_behavior_navigation' => array(),
    ),
    'layer_styles' => array(
      'openlayers_default_wms' => 'default'
    ),
    'layers' => array(
      'osm_mapnik',
    )
  );
  return array('default' => $default);
}

function openlayers_openlayers_layer_types() {
  return array(
    'openlayers_layer_type_wms' => array(
      'title' => t('WMS'),
      'description' => t('Web Map Service'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers') .'/includes/layer_types',
        'file' => 'wms.inc',
        'class' => 'openlayers_layer_type_wms',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layer_type_tms' => array(
      'title' => t('TMS'),
      'description' => t('Tiled Map Service'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers') .'/includes/layer_types',
        'file' => 'tms.inc',
        'class' => 'openlayers_layer_type_tms',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layer_type_osm' => array(
      'title' => t('OSM'),
      'description' => t('OpenStreetMap Standard'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers') .'/includes/layer_types',
        'file' => 'osm.inc',
        'class' => 'openlayers_layer_type_osm',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layer_type_google' => array(
      'title' => t('Google'),
      'description' => t('Google Maps API Map'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers') .'/includes/layer_types',
        'file' => 'google.inc',
        'class' => 'openlayers_layer_type_google',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layer_type_yahoo' => array(
      'title' => t('Yahoo'),
      'description' => t('Yahoo Maps API Map'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers') .'/includes/layer_types',
        'file' => 'yahoo.inc',
        'class' => 'openlayers_layer_type_yahoo',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layer_type_virtualearth' => array(
      'title' => t('Virtual Earth'),
      'description' => t('Microsoft Virtual Earth'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers') .'/includes/layer_types',
        'file' => 'virtualearth.inc',
        'class' => 'openlayers_layer_type_virtualearth',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layer_type_cloudmade' => array(
      'title' => t('CloudMade'),
      'description' => t('CloudMade'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers') .'/includes/layer_types',
        'file' => 'cloudmade.inc',
        'class' => 'openlayers_layer_type_cloudmade',
        'parent' => 'openlayers_layer_type',
      ),
    ),
    'openlayers_layer_type_xyz' => array(
      'title' => t('XYZ'),
      'description' => t('XYZ'),
      'layer_type' => array(
        'path' => drupal_get_path('module', 'openlayers') .'/includes/layer_types',
        'file' => 'xyz.inc',
        'class' => 'openlayers_layer_type_xyz',
        'parent' => 'openlayers_layer_type',
      ),
    ),
  );
}
