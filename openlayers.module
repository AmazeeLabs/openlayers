<?php
// $Id$

/**
 * @defgroup openlayers OpenLayers: Provides an API and Modules to interface with OpenLayers
 *
 * Provides an API and Modules to interface with OpenLayers.  Needs work...
 */

/**
 * @file
 *
 * This file holds the main Drupal hook functions 
 * and private functions for the openlayers module.
 *
 * @ingroup openlayers
 */

/**
 * Map ID Prefix
 */
define('OPENLAYERS_MAP_ID_PREFIX', 'openlayers-map-auto-id');

/**
 * Implementation of hook_help
 */
function openlayers_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers':
      $output = '<p>'. t('The OpenLayers module is the base module for the OpenLayer suite of modules, and provides the main API.') .'</p>';
  }
  
  return $output;
}

/**
 * Implementation of hook_perm
 */
function openlayers_perm() {
  return array('administer openlayers');
}

/**
 * Implementation of hook_theme().
 */
function openlayers_theme() {
  return array(
    'openlayers_map' => array(
      'arguments' => array(
        'map' => array(),
      ),
    ),
  );
}

/**
 * Implementation of hook_menu
 */
function openlayers_menu() {
  $items = array();

  $items['admin/settings/openlayers'] = array(
    'title' => 'OpenLayers',
    'description' => t('OpenLayers administrative settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_admin_settings'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers.admin.inc',
  );
  $items['admin/settings/openlayers/settings'] = array(
    'title' => 'Settings',
    'description' => t('Main settings for OpenLayers.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_admin_settings'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['admin/settings/openlayers/defaults'] = array(
    'title' => 'Defaults',
    'description' => t('Configure defaults for OpenLayers maps.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_admin_default_settings'),
    'access arguments' => array('administer openlayers'),
    'file' => 'includes/openlayers.defaults.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Theme function for openlayers_map
 */
function theme_openlayers_map($map = array()) {
  $output = '
    <div id="'. $map['id'] .'" class="openlayers-map"></div>
  ';
  return $output;
}

/**
 * Intialize OpenLayers
 *
 * Make sure that we have everything we need for OpenLayers
 *
 * @ingroup API
 * @param $params
 *   Associative array of pamaters
 *   (none at the moment)
 * @return
 *   Boolean if intialization was succesful
 */
function openlayers_intialize() {
  $success = TRUE;
  
  // Include the OpenLayers JS
  // We need to check if it a local path or URL, but really only need to do it once.
  static $included = FALSE;
  if ($included == FALSE) {
    $path = check_plain(variable_get('openlayers_source', 'http://openlayers.org/api/OpenLayers.js'));
    // Check for full URL
    if (valid_url($path, TRUE)) {
      // If URL, we have to manually include it in Drupal
      drupal_set_html_head('<script src="'. check_url($path) .'" type="text/javascript"></script>');
      $included = TRUE;
    }
    else {
      drupal_add_js($path);
      $included = TRUE;
    }
  }

  // Add CSS
  // @@TODO: Use a static variable cache
  drupal_add_css(drupal_get_path('module', 'openlayers') .'/openlayers.css', 'module');

  // Add base JS file
  // @@TODO: Use a static variable cache
  drupal_add_js(drupal_get_path('module', 'openlayers') .'/js/openlayers.js', 'module');
  return $success;
}

/**
 * Render Map
 *
 * Given perimeters, render an OpenLayers map
 *
 * @ingroup API
 * @param $map
 *   Associative array of map paramters
 *  
 * @return
 *   Boolean if successful
 */
function openlayers_render_map($map = array()) {
  // Check array
  if (!is_array($map)) {
    return FALSE;
  }
  
  // Intialize
  if (openlayers_intialize() == FALSE) {
    return FALSE;
  }
  
  // Check ID
  if (!$map['id']) {
    $map['id'] = _openlayers_create_map_id();
  }
  
  // Merge with site defaults (saved values)
  $saved_defaults = variable_get('openlayers_defaults', array());
  $map = openlayers_merge_maps($saved_defaults, $map);
  
  // Merge with module/system defaults
  $system_defaults = _openlayers_get_map_defaults();
  $map = openlayers_merge_maps($system_defaults, $map);
  
  // Process layers
  $map['layers'] = _openlayers_layers_process($map['layers'], $map);
  
  // Hook for one last alter
  // hook_openlayers_map_alter(&$map = array())
  drupal_alter('openlayers_map', &$map);

  // Check our map for errors
  _openlayers_error_check_map($map);

  // Add map container to drupal JS settings
  $openlayers = array(
    'openlayers' => array(
      'maps' => array(
        $map['id'] => $map,
      ),
    ),
  );
  drupal_add_js($openlayers, 'setting');
  
  // Add themed HTML (no need for it to go to JS)
  $map['themed'] = theme('openlayers_map', $map);
  
  return $map;
}

/**
 * Get Layer Info
 *
 * Wrapper around layer info hook
 *
 * @ingroup API
 * @return
 *   array of layer info
 */
function openlayers_layers_get_info() {
  $info = array();
  
  // Hook layer info ($map is not necessary)
  // hook_openlayers_layers_info($map = array())
  $info = module_invoke_all('openlayers_layers_info');

  return $info;
}

/**
 * OpenLayers Form Wrapper
 *
 * Get the form array to customize OpenLayers Maps.  This is wrapper
 * for a function in another file.  This keeps the form from
 * being parsed unnecesarily
 *
 * @ingroup API
 * @param $defaults
 *   Array of defaults
 * @return
 *   Array of form items
 */
function openlayers_map_form($defaults = array()) {
  module_load_include('inc', 'openlayers', '/includes/openlayers.form');
  return _openlayers_map_form($defaults);
}

/**
 * OpenLayers Form to Map Wrapper
 *
 * Converst Form submission to map array.  This is wrapper
 * for a function in another file.  This keeps the form from
 * being parsed unnecesarily
 *
 * @ingroup API
 * @param $values
 *   Array of values to convert
 * @return
 *   Array of form items
 */
function openlayers_convert_form_to_map($values = array()) {
  module_load_include('inc', 'openlayers', '/includes/openlayers.form');
  return _openlayers_convert_form_to_map($values);
}

/**
 * Merge Maps
 *
 * Recursive function to merge maps.  PHP's array_merge_recursive
 * creates unnecesary arrays ot values if keys are the same.  This
 * function simply overwrites a value, even if the key is numeric.
 *
 * @ingroup API
 * @return
 *   map array
 */
function openlayers_merge_maps($map1 = array(), $map2 = array()) {

  // Check maps
  if (is_array($map1) && is_array($map2)) {
    foreach ($map2 as $k => $v) {
      if (isset($map1[$k]) && is_array($v) && is_array($map1[$k])) {
        $map1[$k] = openlayers_merge_maps($map1[$k], $v);
      }
      else {
        $map1[$k] = $v;
      }
    }
  }
  
  return $map1;
}

/**
 * Process Layers
 *
 * Get full data for any layers and add handlers
 *
 * @param $layers
 *   Array of layers to process
 * @param $map
 *   Map array
 * @return
 *   Array of processed layers
 */
function _openlayers_layers_process($layers = array(), $map = array()) {
  $processed = array();
  
  // Get layer info array
  $layer_info = openlayers_layers_get_info();

  // Go through layers
  foreach ($layers as $k => $layer) {
    // Check if array, if array, just pass on
    if (is_array($layer)) {
      $processed[$k] = $layer;
    }
    else {
      // If not array, we want to include the file and call the function
      if (($info = $layer_info[$layer]) && is_array($layer_info[$layer])) {
        // Check if file exists
        if (is_file('./'. $info['file'])) {
          require_once './'. $info['file'];
          // Check for function
          if (function_exists($info['callback'])) {
            // Call function and give it the layer name
            $result = call_user_func_array($info['callback'], $layer);
            // Check for result
            if (isset($result) && is_array($result)) {
              $processed[$k] = $result;
            }
          }
        }
      }
    }
  }

  // Add Handlers
  $handlers = module_invoke_all('openlayers_layers_handler_info', $map);
  // Go through processed
  foreach ($processed as $k => $l) {
    // Check for handler
    if (is_string($handlers[$l['type']]['layer_handler'])) {
      $processed[$k]['layer_handler'] = $handlers[$l['type']]['layer_handler'];
      // Include JS file if there is one
      if (is_string($handlers[$l['type']]['js_file'])) {
        drupal_add_js($handlers[$l['type']]['js_file'], 'module');
      }
    }
  }

  // Return processed
  return $processed;
}

/**
 * Create Map ID
 *
 * Create a unique ID for any maps that are not assigned an ID
 *
 * @note
 *   Technically someone can assign a map ID identical
 *   to the one that is created
 * @return
 *   New map id
 */
function _openlayers_create_map_id() {
  // Set up variables
  $map_id = '';
  static $map_count = 0;
  // Put together ID
  $map_id = OPENLAYERS_MAP_ID_PREFIX .'-'. $map_count;
  // Add another
  $map_count += 1;
  // Return ID
  return $map_id;
}

/**
 * Get Map Defaults
 *
 * @return
 *   map array
 */
function _openlayers_get_map_defaults() {
  $map_default = array(
    'id' => _openlayers_create_map_id(),
    'width' => 'auto',
    'height' => '300px',
    'center' => array(
      'lat' => '0',
      'lon' => '0',
      'zoom' => 2,
    ),
    'options' => array(
      'projection' => 4326,
      'displayProjection' => 4326,
    ),
    'controls' => array(
      'LayerSwitcher' => TRUE,
    ),
    'layers' => array(
      'openlayers_default_wms'
    ),
  );
  return $map_default;
}

/**
 * Check map array for incompatibilities or errors
 *
 * @return
 *   TRUE or FALSE depending on errors found
 */

function _openlayers_error_check_map($map){
  // @TODO: Should this be a hook?
  $pass = TRUE;
  
  // Check layer projections
  foreach ($map['layers'] as $layer){
    if ($layer['projection']){
      if (!in_array($map['options']['projection'],$layer['projection'])){
        drupal_set_message("The layer ". $layer['name'] ." cannot work with the map projection: EPSG:". $map['options']['projection'] .". Please change the map projection or remove the layer. ". $layer['name'] ." is compatable with the following projections: ". implode(", ",$layer['projection']), "warning");
        $pass = FALSE;
      }
    }
  }
  
  return $pass;
}


/**
 * Implemnetation of hook_openlayers_layers_handler
 * 
 * @ingroup Default Layer Types and Instances
 */
function openlayers_openlayers_layers_handler_info($map = array()) {
  return array(
    'WMS' => array(
      'layer_handler' => 'openlayersLayerHandlerWMS',
      'js_file' => drupal_get_path('module', 'openlayers') .'/js/openlayers_layers.js',
    ),
    'Vector' => array(
      'layer_handler' => 'openlayersLayerHandlerVector',
      'js_file' => drupal_get_path('module', 'openlayers') .'/js/openlayers_layers.js',
    ),
  );
}


/**
 * Implementation of hook_openlayers_layers_info
 *
 * @ingroup Default Layer Types and Instances
 */
function openlayers_openlayers_layers_info() {
  // Define info array
  $info['openlayers_default_wms'] = array(
    'name' => t('Default OpenLayers WMS'),
    'file' => drupal_get_path('module', 'openlayers') .'/includes/openlayers.layers.inc',
    'callback' => 'openlayers_process_layers',
  );
  
  return $info;
}