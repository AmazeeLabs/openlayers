<?php
// $Id$

/**
 * @file
 * Main OpenLayers Test Module file
 *
 * This file contains a test module to help with automated
 * testing.
 *
 * @ingroup openlayers
 */

/**
 * Implementation of hook_menu().
 */
function openlayers_test_menu() {
  $items = array();

  $items['admin/settings/openlayers/test'] = array(
    'title' => 'OpenLayers Test Page',
    'description' => 'Test Page for OpenLayers.',
    'page callback' => 'openlayers_test_page',
    'access arguments' => array('administer openlayers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 9999,
  );

  return $items;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function openlayers_test_ctools_plugin_api($module, $api) {
  // Define plugins for OpenLayers plugins api
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_presets':
        return array('version' => 1);

    }
  }
}

/**
 * Implementation of hook_openlayers_presets().
 */
function openlayers_test_openlayers_presets() {
  // Create maps
  $default = new stdClass();
  $default->api_version = 1;
  $default->name = 'default_test';
  $default->title = t('Default Test Map');
  $default->description = t('This is a test preset.');
  $default->data = array(
    'projection' => '4326',
    'width' => 'auto',
    'default_layer' => 'openlayers_default_wms',
    'height' => '300px',
    'center' => array(
      'lat' => '0',
      'lon' => '0',
      'zoom' => '2',
    ),
    'options' => array(
      'displayProjection' => '4326',
    ),
    'behaviors' => array(
      'openlayers_behavior_layerswitcher' => array(),
      'openlayers_behavior_navigation' => array(),
      'openlayers_behavior_panzoombar' => array(),
      'openlayers_behavior_mouseposition' => array(),
    ),
  );
  // Map with some behaviors
  $behaviors_test = new stdClass();
  $behaviors_test->api_version = 1;
  $behaviors_test->name = 'behaviors_test';
  $behaviors_test->title = t('Behaviors Test Map');
  $behaviors_test->description = t('This is a test preset.');
  $behaviors_test->data = array(
    'projection' => '4326',
    'width' => 'auto',
    'default_layer' => 'openlayers_default_wms',
    'height' => '300px',
    'center' => array(
      'lat' => '0',
      'lon' => '0',
      'zoom' => '2',
    ),
    'options' => array(
      'displayProjection' => '4326',
    ),
    'behaviors' => array(
      'openlayers_behavior_layerswitcher' => array(),
    ),
  );

  // Return preset(s) in an array
  return array(
    'default_test' => $default,
    'behaviors_test' => $behaviors_test,
  );
}

/**
 * Callback for OpenLayers Test Page
 */
function openlayers_test_page() {
  $output = '';

  // Render maps
  $render_default = openlayers_render_map();
  //$render_default_test = openlayers_render_map('default_test');
  //$render_behaviors_test = openlayers_render_map('behaviors_test');

  // Create collapsed fieldset
  //$render_fieldset = openlayers_render_map();
  $element = array(
    '#value' => $render_fieldset['themed'],
    '#title' => t('Fieldset Example'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $fieldset = theme_fieldset($element);

  // Create output
  $output .= '
    <h3>' . t('Default Map') . '</h3>
     ' . $render_default . '

    <h3>' . t('Default Test Map') . '</h3>
     ' . $render_default_test . '

    <h3>' . t('Behaviors Test Map') . '</h3>
     ' . $render_behaviors_test . '

    <!-- Not including fieldset cause its broken -->
  ';

  return $output;
}
