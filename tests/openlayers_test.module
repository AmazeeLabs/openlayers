<?php
// $Id$

/**
 * @file
 * Main OpenLayers Test Module file
 *
 * This file contains a test module to help with automated
 * testing.
 *
 * @ingroup openlayers
 */

/**
 * Implementation of hook_menu().
 */
function openlayers_test_menu() {
  $items = array();

  $items['admin/build/openlayers/test'] = array(
    'title' => 'OpenLayers Test Page',
    'description' => 'Test Page for OpenLayers.',
    'page callback' => 'openlayers_test_page',
    'access arguments' => array('administer openlayers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 9999,
  );

  return $items;
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function openlayers_test_ctools_plugin_api($module, $api) {
  // Define plugins for OpenLayers plugins api
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_presets':
        return array('version' => 1);

    }
  }
}

/**
 * Implementation of hook_openlayers_presets().
 */
function openlayers_test_openlayers_presets() {
  // Map with some behaviors
  $behaviors_test = new stdClass();
  $behaviors_test->api_version = 1;
  $behaviors_test->name = 'behaviors_test';
  $behaviors_test->title = t('Test: Behaviors');
  $behaviors_test->description = t('This is a test preset.');
  $behaviors_test->data = array(
    'projection' => '4326',
    'projection' => '900913',
    'width' => 'auto',
    'default_layer' => 'osm_mapnik',
    'height' => '400px',
    'center' => array(
      'initial' => array(
        'centerpoint' => '0,0',
        'zoom' => '2'
      )
    ),
    'options' => array(
      'displayProjection' => '4326',
      'maxExtent' => openlayers_get_extent('4326'),
    ),
    'behaviors' => array(
      'openlayers_behavior_panzoombar' => array(),
      'openlayers_behavior_layerswitcher' => array(),
      'openlayers_behavior_attribution' => array(),
      'openlayers_behavior_keyboarddefaults' => array(),
      'openlayers_behavior_navigation' => array(),
      'openlayers_behavior_fullscreen' => array(),
      'openlayers_behavior_mouseposition' => array(),
      'openlayers_behavior_dragpan' => array(),
      'openlayers_behavior_boxselect' => array(),
      'openlayers_behavior_permalink' => array(),
      'openlayers_behavior_scaleline' => array(),
      'openlayers_behavior_zoombox' => array(),
      'openlayers_behavior_zoomtomaxextent' => array(),
    ),
    'layers' => array(
      'osm_mapnik' => 'osm_mapnik',
    )
  );
  
  /*
  // Map with popups
  $popup_test = new stdClass();
  $popup_test->api_version = 1;
  $popup_test->name = 'popup_test';
  $popup_test->title = t('Test: Popups');
  $popup_test->description = t('This is a test preset.');
  $popup_test->data = array(
    'projection' => '4326',
    'projection' => '900913',
    'width' => 'auto',
    'default_layer' => 'osm_mapnik',
    'height' => '400px',
    'center' => array(
      'initial' => array(
        'centerpoint' => '0,0',
        'zoom' => '2'
      )
    ),
    'options' => array(
      'displayProjection' => '4326',
      'maxExtent' => openlayers_get_extent('4326'),
    ),
    'behaviors' => array(
      'openlayers_behavior_panzoombar' => array(),
      'openlayers_behavior_layerswitcher' => array(),
      'openlayers_behavior_attribution' => array(),
      'openlayers_behavior_keyboarddefaults' => array(),
      'openlayers_behavior_navigation' => array(),
    ),
    'layers' => array(
      'osm_mapnik' => 'osm_mapnik',
    )
  );
  // Add features
  $features = array();
  for ($i = 0; $i < 30; $i++) {
    $x = 2 + rand(-30, 30);
    $y = 2 + rand(-30, 30);
    $features['feature_' . $i . $j] = array(
      'wkt' => 'POINT(' . $x . ' ' . $y . ')',
      'projection' => '4326',
    );
  }
  $popup_test->data['layers']['style_vector']['features'] = $features;
  */

  // Return preset(s) in an array
  return array(
    'default_test' => $default,
    'behaviors_test' => $behaviors_test,
  );
}

/**
 * Callback for OpenLayers Test Page
 */
function openlayers_test_page() {
  $output = '';

  // Render all presets
  $presets = openlayers_presets();
  foreach ($presets as $name => $preset) {
    $output .= '
      </h3> ' . $preset->title . '</h3>
      ' . openlayers_render_map($preset->data) . '
    ';
  }

  // Create collapsed fieldset
  //$render_fieldset = openlayers_render_map();
  $element = array(
    '#value' => $render_fieldset['themed'],
    '#title' => t('Fieldset Example'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $fieldset = theme_fieldset($element);

  // Create output
  $output .= '
    <!-- Not including fieldset cause its broken -->
  ';

  return $output;
}
